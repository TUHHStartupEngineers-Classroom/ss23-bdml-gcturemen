{
  "hash": "728d11a3ec54f7ebf6050cf0575bdba9",
  "result": {
    "markdown": "---\ntitle: \"Automated Machine Learning with H2O (II)\"\nauthor: \"Gani Cem Türemen\"\n---\n\n\n# Challenge Summary\n\nFor the challenge, we shall be working with a Product Backorders dataset. The goal here is to predict whether or not a product will be put on backorder status, given a number of product metrics such as current inventory, transit time, demand forecasts and prior sales. It’s a classic Binary Classification problem.\n\n# Objectives\n\nWe will apply our learning of H2O Automated Machine Learning to predict backorder status.\n\n# Solution\n\n## Import Libraries\n\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-1_691aeddb1aa0d93c3fd5b22075f97027'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(readxl)\nlibrary(h2o)\n```\n:::\n\n\n## Load the training & test dataset\n\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-2_650b1d00c6e368a8b1688ab56b97cc6f'}\n\n```{.r .cell-code}\nproduct_backorders_tbl <- read_csv(\"data/product_backorders.csv\")\n\nproduct_backorders_tbl %>% glimpse()\n```\n:::\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-3_103294d01493845ca0d82e75f941961a'}\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n```\n:::\n:::\n\n\nSplit the data into training and test sets:\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-4_e64ee48bb03ee8d70407e6594542632f'}\n\n```{.r .cell-code}\nset.seed(seed = 777)\nsplit_obj <- initial_split(product_backorders_tbl, prop = 0.80)\n\ntrain_set_tbl <- training(split_obj)\ntest_set_tbl  <- testing(split_obj)\n```\n:::\n\n\nSince some columns such as `deck_risk` are not numeric, they have to be converted into factor. The recipe below will take care of that:\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-5_373d6fa91c702787cc54c31900dca8f0'}\n\n```{.r .cell-code}\nrecipe_obj <- recipe(went_on_backorder ~., data = train_set_tbl) %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(potential_issue,\n                 deck_risk,\n                 oe_constraint,\n                 ppap_risk,\n                 stop_auto_buy,\n                 rev_stop,\n                 went_on_backorder,\n                 fn = as.factor) %>% \n  prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_set_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_set_tbl)\n\ntrain_tbl %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 15,242\n#> Columns: 23\n#> $ sku               <dbl> 1370478, 1423347, 1704266, 2258894, 3000725, 2888766…\n#> $ national_inv      <dbl> 4, 59, 1, 9, 151, 6, 195, 66, 52, 0, 25, 1, 4, 2, 10…\n#> $ lead_time         <dbl> 12, NA, 8, 2, 8, 2, 8, 8, 14, 2, 4, 4, 8, 8, 2, 8, 5…\n#> $ in_transit_qty    <dbl> 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ forecast_3_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 122, 20, 0, 9, 15, 0, 28, 0, 0,…\n#> $ forecast_6_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 214, 35, 0, 18, 15, 0, 61, 0, 0…\n#> $ forecast_9_month  <dbl> 1, 0, 0, 0, 0, 0, 0, 306, 65, 0, 18, 21, 0, 94, 0, 0…\n#> $ sales_1_month     <dbl> 1, 0, 1, 0, 0, 0, 2, 36, 13, 0, 9, 4, 0, 3, 0, 0, 0,…\n#> $ sales_3_month     <dbl> 1, 7, 1, 0, 15, 0, 4, 119, 31, 0, 24, 9, 0, 26, 0, 0…\n#> $ sales_6_month     <dbl> 3, 20, 1, 0, 27, 0, 12, 209, 78, 0, 43, 15, 0, 56, 0…\n#> $ sales_9_month     <dbl> 3, 28, 1, 3, 43, 0, 16, 322, 121, 0, 75, 22, 1, 82, …\n#> $ min_bank          <dbl> 0, 0, 0, 0, 7, 0, 1, 45, 21, 1, 0, 2, 1, 6, 0, 0, 1,…\n#> $ potential_issue   <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ pieces_past_due   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.87, -99.00, 0.99, 0.99, 0.98, 0.98, 0.88, 0.98, 0.…\n#> $ perf_12_month_avg <dbl> 0.67, -99.00, 0.98, 0.99, 0.96, 0.99, 0.91, 0.99, 0.…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ deck_risk         <fct> No, Yes, No, Yes, No, No, No, No, No, No, No, No, No…\n#> $ oe_constraint     <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ ppap_risk         <fct> No, Yes, No, No, No, No, No, No, Yes, No, No, No, No…\n#> $ stop_auto_buy     <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n#> $ rev_stop          <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ went_on_backorder <fct> No, No, Yes, No, No, No, No, No, No, No, No, Yes, No…\n```\n:::\n:::\n\n\n## Specify the response and predictor variables\n\nTo determine the backorder status `went_on_backorder`, all the other columns will be used as predictors:\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-6_cab611db43ff798753c2b16a747cc19d'}\n\n```{.r .cell-code}\nh2o.init()\n\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.80), seed = 767)\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n```\n:::\n\n    \n## Run AutoML specifying the stopping criterion\n\nSet 30 seconds for `max_runtime_secs` and 5 for `nfolds`:\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-7_12a074549fe737861d03dcf63638c9ea'}\n\n```{.r .cell-code}\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n```\n:::\n\n\n## View the leaderboard\n\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-8_848c1350c492c1e0db7017f95c380547'}\n\n```{.r .cell-code}\nautoml_models_h2o@leaderboard\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                                  model_id       auc   logloss\n#> 1                          GBM_1_AutoML_1_20230606_235930 0.9217779 0.2278932\n#> 2 StackedEnsemble_BestOfFamily_1_AutoML_1_20230606_235930 0.9216773 0.2214933\n#> 3                          DRF_1_AutoML_1_20230606_235930 0.7456369 2.7271022\n#> 4                          GLM_1_AutoML_1_20230606_235930 0.7403997 0.3303213\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.6257940            0.1667248 0.2612527 0.06825299\n#> 2 0.6303983            0.1693529 0.2611982 0.06822452\n#> 3 0.3779712            0.2808203 0.3280305 0.10760404\n#> 4 0.2842939            0.3237555 0.3133306 0.09817608\n#> \n#> [4 rows x 7 columns]\n```\n:::\n:::\n\n\n## Predicting using Leader Model\n\n\n\n\n\nExtract the first model of the leaderboard:\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-10_4a71414f93f449813ffffbe879049491'}\n\n```{.r .cell-code}\nleader_model <- automl_models_h2o@leaderboard %>% \n  extract_h2o_model_name_by_position(1) %>% \n  h2o.getModel()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> GBM_1_AutoML_1_20230606_235930\n```\n:::\n:::\n\n\nUse the extracted model to make predictions on the test set:\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-11_1e1e7fbc2f9611cd7ea986a038e798e3'}\n\n```{.r .cell-code}\npredictions <- h2o.predict(leader_model, newdata = as.h2o(test_tbl))\n\npredictions_tbl <- predictions %>% as_tibble()\n\npredictions_tbl %>% glimpse()\n```\n:::\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-12_ef9fe2f46d739905404126e94c713c6a'}\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 3,811\n#> Columns: 3\n#> $ predict <fct> Yes, Yes, Yes, Yes, No, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes…\n#> $ No      <dbl> 0.7289282, 0.5590327, 0.5837228, 0.4468112, 0.8088230, 0.57161…\n#> $ Yes     <dbl> 0.27107175, 0.44096726, 0.41627720, 0.55318882, 0.19117701, 0.…\n```\n:::\n:::\n\n\n## Save the leader model\n\nSave the extracted model in case it is needed later:\n\n::: {.cell hash='04_aml_with_h2o_ii_cache/html/unnamed-chunk-13_35082580450ea759c3700c5191030170'}\n\n```{.r .cell-code}\nleader_model %>% h2o.saveModel(path = \"h2o_models/\")\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}