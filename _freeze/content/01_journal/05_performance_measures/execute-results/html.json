{
  "hash": "5860471114e2d17b0afd53091df0247e",
  "result": {
    "markdown": "---\ntitle: \"Performance Measures\"\nauthor: \"Gani Cem Türemen\"\n---\n\n\n# Challenge Summary\n\nFor the challenge, we will continue working on the Product Backorders dataset. The goal here is to visualize various performance metrics of H2O models to simplify evaluation of them.\n\n# Objectives\n\nApply your learning of H2O Automated Machine Learning to predict backorder status and visualize performance metrics to evaluate models.\n\n# Solution\n\n## Import Libraries\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-1_d98d3c219efbbbc61564abc925bc85e8'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(rsample)\nlibrary(h2o)\nlibrary(recipes)\nlibrary(cowplot)\nlibrary(glue)\n```\n:::\n\n\n## Load the training & test dataset\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-2_c09413e5328f6766b6a45d795889b268'}\n\n```{.r .cell-code}\nproduct_backorders_tbl <- read_csv(\"data/product_backorders.csv\")\n\nproduct_backorders_tbl %>% glimpse()\n```\n:::\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-3_88219ec31f74a06191d1e95572947cfe'}\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n```\n:::\n:::\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-4_1d285e883fa3acb237edefbd406a2538'}\n\n```{.r .cell-code}\nset.seed(seed = 777)\nsplit_obj <- initial_split(product_backorders_tbl, prop = 0.80)\n\ntrain_set_tbl <- training(split_obj)\ntest_set_tbl  <- testing(split_obj)\n```\n:::\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-5_d2e7380d8ba3b0d54f27e94174f418c2'}\n\n```{.r .cell-code}\nrecipe_obj <- recipe(went_on_backorder ~., data = train_set_tbl) %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(potential_issue,\n                 deck_risk,\n                 oe_constraint,\n                 ppap_risk,\n                 stop_auto_buy,\n                 rev_stop,\n                 went_on_backorder,\n                 fn = as.factor) %>% \n  prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_set_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_set_tbl)\n\ntrain_tbl %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 15,242\n#> Columns: 23\n#> $ sku               <dbl> 1370478, 1423347, 1704266, 2258894, 3000725, 2888766…\n#> $ national_inv      <dbl> 4, 59, 1, 9, 151, 6, 195, 66, 52, 0, 25, 1, 4, 2, 10…\n#> $ lead_time         <dbl> 12, NA, 8, 2, 8, 2, 8, 8, 14, 2, 4, 4, 8, 8, 2, 8, 5…\n#> $ in_transit_qty    <dbl> 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ forecast_3_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 122, 20, 0, 9, 15, 0, 28, 0, 0,…\n#> $ forecast_6_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 214, 35, 0, 18, 15, 0, 61, 0, 0…\n#> $ forecast_9_month  <dbl> 1, 0, 0, 0, 0, 0, 0, 306, 65, 0, 18, 21, 0, 94, 0, 0…\n#> $ sales_1_month     <dbl> 1, 0, 1, 0, 0, 0, 2, 36, 13, 0, 9, 4, 0, 3, 0, 0, 0,…\n#> $ sales_3_month     <dbl> 1, 7, 1, 0, 15, 0, 4, 119, 31, 0, 24, 9, 0, 26, 0, 0…\n#> $ sales_6_month     <dbl> 3, 20, 1, 0, 27, 0, 12, 209, 78, 0, 43, 15, 0, 56, 0…\n#> $ sales_9_month     <dbl> 3, 28, 1, 3, 43, 0, 16, 322, 121, 0, 75, 22, 1, 82, …\n#> $ min_bank          <dbl> 0, 0, 0, 0, 7, 0, 1, 45, 21, 1, 0, 2, 1, 6, 0, 0, 1,…\n#> $ potential_issue   <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ pieces_past_due   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.87, -99.00, 0.99, 0.99, 0.98, 0.98, 0.88, 0.98, 0.…\n#> $ perf_12_month_avg <dbl> 0.67, -99.00, 0.98, 0.99, 0.96, 0.99, 0.91, 0.99, 0.…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ deck_risk         <fct> No, Yes, No, Yes, No, No, No, No, No, No, No, No, No…\n#> $ oe_constraint     <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ ppap_risk         <fct> No, Yes, No, No, No, No, No, No, Yes, No, No, No, No…\n#> $ stop_auto_buy     <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n#> $ rev_stop          <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ went_on_backorder <fct> No, No, Yes, No, No, No, No, No, No, No, No, Yes, No…\n```\n:::\n:::\n\n\n## Specify the response and predictor variables\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-6_26762db09980bba87a3ee5216a3226cf'}\n\n```{.r .cell-code}\nh2o.init()\n\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.80), seed = 767)\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n```\n:::\n\n    \n## Run AutoML specifying the stopping criterion\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-7_c363991dde88324ae735e8b58651fab6'}\n\n```{.r .cell-code}\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 60,\n  nfolds            = 5 \n)\n```\n:::\n\n\n## View the leaderboard\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-8_c1556bfaf53b0454fe10563a63287890'}\n\n```{.r .cell-code}\nautoml_models_h2o@leaderboard\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_1_AutoML_1_20230603_232725 0.9450212 0.1804094\n#> 2 StackedEnsemble_BestOfFamily_2_AutoML_1_20230603_232725 0.9446927 0.1810745\n#> 3                          GBM_1_AutoML_1_20230603_232725 0.9442833 0.1822440\n#> 4 StackedEnsemble_BestOfFamily_1_AutoML_1_20230603_232725 0.9442798 0.1816096\n#> 5                          GBM_4_AutoML_1_20230603_232725 0.9352965 0.2162264\n#> 6                          GBM_3_AutoML_1_20230603_232725 0.9325110 0.2084508\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7399996            0.1391773 0.2311003 0.05340736\n#> 2 0.7314874            0.1733098 0.2316515 0.05366240\n#> 3 0.7303754            0.1734592 0.2323764 0.05399879\n#> 4 0.7301131            0.1734592 0.2319166 0.05378531\n#> 5 0.7177510            0.1789265 0.2486873 0.06184535\n#> 6 0.7292422            0.1781501 0.2444128 0.05973761\n#> \n#> [9 rows x 7 columns]\n```\n:::\n:::\n\n\n## Leaderboard visualization\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-9_2d5d49960cbcf5020d56725e3965afa9'}\n\n```{.r .cell-code}\nmodel_leaderboard <- automl_models_h2o@leaderboard %>%\n  as_tibble() %>%\n  select(-c(aucpr, mean_per_class_error, rmse, mse)) %>%\n  mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n  rownames_to_column(var = \"row_name\") %>%\n  mutate(model_id   = as_factor(model_id) %>% reorder(auc), \n         model_type = as.factor(model_type)\n  ) %>% \n  pivot_longer(cols = -c(model_id, model_type, row_name), \n               names_to = \"key\", \n               values_to = \"value\", \n               names_transform = list(key = forcats::fct_inorder)\n  ) %>% \n  mutate(model_id = paste0(row_name, \". \", model_id) %>% as_factor() %>% fct_rev())\n\nmodel_leaderboard %>%\n  ggplot(aes(value, model_id, color = model_type)) +\n  geom_point(size = 3) +\n  geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n  \n  # Facet to break out logloss and auc\n  facet_wrap(~ key, scales = \"free_x\") +\n  labs(title = \"Leaderboard Metrics\",\n       subtitle = paste0(\"Ordered by: \", \"auc\"),\n       y = \"Model Position, Model ID\", x = \"\") + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Tune a model with grid search\n\n\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-11_b11c06a892126ed384e69447ae3e7055'}\n\n```{.r .cell-code}\nmodel <- automl_models_h2o@leaderboard %>% \n  extract_h2o_model_name_by_position(9) %>% \n  h2o.getModel()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> GLM_1_AutoML_1_20230603_232725\n```\n:::\n\n```{.r .cell-code}\nh2o.performance(model, newdata = as.h2o(test_tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> H2OBinomialMetrics: glm\n#> \n#> MSE:  0.09817608\n#> RMSE:  0.3133306\n#> LogLoss:  0.3303213\n#> Mean Per-Class Error:  0.3237555\n#> AUC:  0.7403997\n#> AUCPR:  0.2842939\n#> Gini:  0.4807994\n#> R^2:  0.08355864\n#> Residual Deviance:  2517.709\n#> AIC:  2575.709\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     2230 1116 0.333533  =1116/3346\n#> Yes     146  319 0.313978    =146/465\n#> Totals 2376 1435 0.331147  =1262/3811\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.130969    0.335789 221\n#> 2                       max f2  0.100363    0.508274 265\n#> 3                 max f0point5  0.228856    0.319582 102\n#> 4                 max accuracy  0.421982    0.880609  16\n#> 5                max precision  1.000000    1.000000   0\n#> 6                   max recall  0.000054    1.000000 399\n#> 7              max specificity  1.000000    1.000000   0\n#> 8             max absolute_mcc  0.100363    0.239662 265\n#> 9   max min_per_class_accuracy  0.132503    0.671847 219\n#> 10 max mean_per_class_accuracy  0.100363    0.683015 265\n#> 11                     max tns  1.000000 3346.000000   0\n#> 12                     max fns  1.000000  464.000000   0\n#> 13                     max fps  0.000054 3346.000000 399\n#> 14                     max tps  0.000054  465.000000 399\n#> 15                     max tnr  1.000000    1.000000   0\n#> 16                     max fnr  1.000000    0.997849   0\n#> 17                     max fpr  0.000054    1.000000 399\n#> 18                     max tpr  0.000054    1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n```\n:::\n:::\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-12_a882ff1adb90fcf387bf76d7a362ed3d'}\n\n```{.r .cell-code}\nmodel_grid <- h2o.grid(\n  algorithm = \"glm\",\n  grid_id = \"model_grid\",\n  x = x,\n  y = y,\n  training_frame = train_h2o,\n  validation_frame = valid_h2o,\n  nfolds = 5,\n  hyper_params = list(\n    alpha = c(0, 0.25, 0.50, 0.75, 1.00),\n    lambda = c(0, 0.01, 0.1, 1, 10)\n  )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\nh2o.getGrid(grid_id = \"model_grid\", sort_by = \"auc\", decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: model_grid \n#> Used hyper parameters: \n#>   -  alpha \n#>   -  lambda \n#> Number of models: 25 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by decreasing auc\n#>   alpha lambda          model_ids     auc\n#> 1   0.0    0.0 model_grid_model_1 0.79015\n#> 2   1.0    0.0 model_grid_model_5 0.78835\n#> 3  0.25    0.0 model_grid_model_2 0.78667\n#> 4  0.75    0.0 model_grid_model_4 0.78667\n#> 5   0.5    0.0 model_grid_model_3 0.78573\n#> \n#> ---\n#>    alpha lambda           model_ids     auc\n#> 20   0.5   10.0 model_grid_model_23 0.48927\n#> 21  0.25   10.0 model_grid_model_22 0.48640\n#> 22  0.75    0.1 model_grid_model_14 0.48377\n#> 23   0.5    1.0 model_grid_model_18 0.48296\n#> 24  0.75    1.0 model_grid_model_19 0.48241\n#> 25   1.0   10.0 model_grid_model_25 0.48057\n```\n:::\n\n```{.r .cell-code}\nmodel_grid_5 <- h2o.getModel(\"model_grid_model_5\")\nmodel_grid_5 %>% h2o.auc(train = T, valid = T, xval = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>     train     valid      xval \n#> 0.7866092 0.7827733 0.7883548\n```\n:::\n:::\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-13_563c409233f5ce19a49b972da79463a3'}\n\n```{.r .cell-code}\nmodel_grid_5 %>% h2o.performance(newdata = as.h2o(test_tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> H2OBinomialMetrics: glm\n#> \n#> MSE:  0.09534117\n#> RMSE:  0.3087737\n#> LogLoss:  0.3223601\n#> Mean Per-Class Error:  0.313812\n#> AUC:  0.7742565\n#> AUCPR:  0.3253347\n#> Gini:  0.5485131\n#> R^2:  0.1100216\n#> Residual Deviance:  2457.029\n#> AIC:  2503.029\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     2534  812 0.242678  =812/3346\n#> Yes     179  286 0.384946   =179/465\n#> Totals 2713 1098 0.260037  =991/3811\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.158004    0.365963 193\n#> 2                       max f2  0.101413    0.535378 262\n#> 3                 max f0point5  0.234898    0.363489 111\n#> 4                 max accuracy  0.399793    0.881134  31\n#> 5                max precision  0.680566    0.750000   9\n#> 6                   max recall  0.000019    1.000000 399\n#> 7              max specificity  0.999834    0.999701   0\n#> 8             max absolute_mcc  0.117944    0.279256 240\n#> 9   max min_per_class_accuracy  0.136795    0.695158 216\n#> 10 max mean_per_class_accuracy  0.107751    0.711258 254\n#> 11                     max tns  0.999834 3345.000000   0\n#> 12                     max fns  0.999834  463.000000   0\n#> 13                     max fps  0.000019 3346.000000 399\n#> 14                     max tps  0.000019  465.000000 399\n#> 15                     max tnr  0.999834    0.999701   0\n#> 16                     max fnr  0.999834    0.995699   0\n#> 17                     max fpr  0.000019    1.000000 399\n#> 18                     max tpr  0.000019    1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n```\n:::\n:::\n\n\n## Visualize the trade-off between the precision and the recall and the optimal threshold\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-14_92d0bb8cdf81d622af661d74d06f9fe0'}\n\n```{.r .cell-code}\np_model_grid_5 <- model_grid_5 %>% \n  h2o.performance(newdata = as.h2o(test_tbl))\n\np_model_grid_5_tbl <- p_model_grid_5 %>% \n  h2o.metric() %>%\n  as_tibble() %>%\n  mutate(auc = h2o.auc(p_model_grid_5))\n\np_model_grid_5_tbl %>%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(p_model_grid_5, \"f1\")) +\n  labs(title = \"Precision vs Recall\", y = \"value\")\n```\n:::\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-15_3b8b3fff8e8a9138c4b9acc983bd37bc'}\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## ROC Plot\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-16_4cb57d27fb02143052fcf26b26b791c2'}\n\n```{.r .cell-code}\nroc_plot <- p_model_grid_5_tbl %>% \n  mutate(auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%\n  ggplot(aes(fpr, tpr, linetype = auc)) +\n  geom_line(size = 1) +\n  geom_abline(color = \"red\", linetype = \"dotted\") +\n  labs(\n    title = \"ROC Plot\",\n    subtitle = \"-\"\n  )\n\nroc_plot\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## Precision vs Recall Plot\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-17_5d53c38e699df2546e2823eae0330205'}\n\n```{.r .cell-code}\npr_plot <- p_model_grid_5_tbl %>%\n  mutate(auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%\n  ggplot(aes(recall, precision, linetype = auc)) +\n  geom_line(size = 1) +\n  labs(\n    title = \"Precision vs Recall Plot\",\n    subtitle = \"-\"\n  )\n\npr_plot\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Gain Plot\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-18_c55c5652cba923aa6fa96150e6a14c43'}\n\n```{.r .cell-code}\ngain_lift_tbl <- p_model_grid_5 %>%\n  h2o.gainsLift() %>%\n  as_tibble()\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"lift\")) %>%\n  mutate(baseline = cumulative_data_fraction) %>%\n  rename(gain     = cumulative_capture_rate) %>%\n  # prepare the data for the plotting (for the color and group aesthetics)\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_plot <- gain_transformed_tbl %>%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Gain Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Gain\"\n  )\n\ngain_plot\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Lift Plot\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-19_ee2bf4f89e1e5aa30ce6abd0ef9ae53a'}\n\n```{.r .cell-code}\nlift_transformed_tbl <- gain_lift_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"capture\")) %>%\n  mutate(baseline = 1) %>%\n  rename(lift = cumulative_lift) %>%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_plot <- lift_transformed_tbl %>%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Lift Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Lift\"\n  )\n\nlift_plot\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## Dashboard with cowplot\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-20_504e5a5c9b3fad5cdee6c8478d5e6148'}\n\n```{.r .cell-code}\np_legend <- get_legend(roc_plot)\n\nroc_plot <- roc_plot + theme(legend.position = \"none\")\n\np <- plot_grid(roc_plot, pr_plot, gain_plot, lift_plot, ncol = 2)\n\np_title <- ggdraw() + \n  draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", color = \"#2C3E50\")\n  \np_subtitle <- ggdraw() + draw_label(glue(\"-\"), size = 10, color = \"#2C3E50\")\n  \ncombined_plot <- plot_grid(p_title, \n                           p_subtitle, \n                           p, \n                           p_legend, \n                           ncol = 1, \n                           rel_heights = c(0.05, 0.05, 1, 0.05 * 4))\ncombined_plot\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}