---
title: "Regression (II)"
author: "Gani Cem TÃ¼remen"
---

# Challenge Summary

Our goal is to figure out what gaps exist in the products of a bike manufacturer and come up with a pricing algorithm that will help us to determine a price, if we were to come up with products in that product category.

# Objectives

We will apply our knowledge on regression on a business case. We will specifically apply:

- Modeling: `parsnip`
- Pre-processing: `recipes` and `rsample`
- Bundling the model and recipe: `workflows`
- Evaluation: `yardstick`
- Visualization : `ggplot2`

# Solution

## Import Libraries

```{r}
#| output: false

library(tidyverse)  
library(parsnip)  
library(recipes)  
library(rsample)
library(workflows)
library(yardstick)
```

## Read Data

```{r}
bike_orderlines_tbl <- readRDS("data/bike_orderlines.rds")

bike_features_tbl <- readRDS("data/bike_features_tbl.rds")

bike_orderlines_tbl %>% glimpse()
```

```{r}
bike_features_tbl %>% glimpse()
```

## Data Exploration

We will visualize the data to determine possible product gaps. It would be interesting to see the sales for each `category_2` separated by the frame material. However, we do not have the sales number. Instead, we will use the stock numbers as a proxy:
```{r}
#| output: false

model_num_sold_tbl <- bike_orderlines_tbl %>% 
  select(quantity, model) %>%
  group_by(model) %>%
  summarise(num_sold = sum(quantity)) %>%
  ungroup() %>%
  arrange(desc(num_sold))

model_sales_tbl <- bike_orderlines_tbl %>% 
  select(total_price, model, category_2, frame_material) %>% 
  group_by(model, category_2, frame_material) %>%
  summarise(revenue = sum(total_price)) %>%
  ungroup() %>%
  arrange(desc(revenue))

model_sales_tbl <- model_sales_tbl %>% 
  inner_join(model_num_sold_tbl)

model_sales_tbl
```

```{r}
#| echo: false

model_sales_tbl
```

Visualizing the `model_sales_tbl`:
```{r}
#| warning: false

model_sales_tbl %>% 
  mutate(category_2 = as_factor(category_2) %>% 
           fct_reorder(revenue, .fun = max) %>% 
           fct_rev()) %>% 
  
  ggplot(aes(frame_material, revenue)) +
  geom_violin() +
  geom_jitter(width = 0.1, alpha = 0.5, color = "#2DC6D6") +
  facet_wrap(~ category_2) +
  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, 
                                                    suffix = "M", 
                                                    accuracy = 0.1)) +
  labs(title = "Total Sales for Each Model",
    x = "Frame Material", y = "Revenue") +
  theme(
    panel.background = element_blank(),
    panel.border = element_rect(color = "white", fill = NA),
    plot.background = element_rect(fill = "#222222"),
    line = element_line(color = "white"),
    text = element_text(color = "white"),
    axis.ticks = element_line(color = "white"),
    axis.text = element_text(color = "white")
  )
```

## Build the model

Create a `parsnip` specification for linear regression:
```{r}
linear_model <- linear_reg("regression") %>% set_engine("lm")
```

## Split the data

Split the data into training and test sets:
```{r}
set.seed(1036)
split_obj <- initial_split(bike_features_tbl, prop = 0.80, strata = "category_2")

train_tbl <- training(split_obj)
test_tbl  <- testing(split_obj)

train_tbl <- train_tbl %>%
  set_names(str_replace_all(names(train_tbl), " |-", "_"))
test_tbl  <- test_tbl  %>% 
  set_names(str_replace_all(names(test_tbl),  " |-", "_"))
```

## Create the recipe

To determine the `price` of bikes we will use `category_2`, `frame_material` and `Rear_Derailleur`. Since they are not numeric, we will create dummy variables from them:
```{r}
sales_rec <- recipe(price ~ ., data = train_tbl %>% 
                      select(-c(bike_id:model_year), 
                             -weight, 
                             -category_1, 
                             -c(category_3:Fork), 
                             -c(Front_Derailleur:Brake_Rotor))) %>% 
  step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %>%
  step_zv(all_predictors()) %>%
  prep()

sales_rec
```

## Create the workflow

Bundle the `linear_model` and `sales_rec` together:
```{r}
sales_wflow <- workflow() %>% 
  add_model(linear_model) %>% 
  add_recipe(sales_rec)

sales_wflow
```

Fit the model to the training data:
```{r}
sales_fit <- sales_wflow %>% fit(data = train_tbl)
```

## Evaluate the model

```{r}
#| include: false
# Metrics helper function

calc_metrics <- function(model, new_data = test_tbl) {
  
  model %>%
    predict(new_data = new_data) %>%
    
    bind_cols(new_data %>% select(price)) %>%
    metrics(truth = price, estimate = .pred)
  
}
```

Evaluate the model using `calc_metrics()` helper function:
```{r}
#| warning: false

sales_fit %>% calc_metrics(test_tbl)
```

From the metrics, it is seen that our linear regression model has acceptable performance.