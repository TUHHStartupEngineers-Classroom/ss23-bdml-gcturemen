---
title: "Performance Measures"
author: "Gani Cem TÃ¼remen"
---

# Challenge Summary

For the challenge, we will continue working on the Product Backorders dataset. The goal here is to visualize various performance metrics of H2O models to simplify evaluation of them.

# Objectives

Apply your learning of H2O Automated Machine Learning to predict backorder status and visualize performance metrics to evaluate models.

# Solution

## Import Libraries

```{r}
#| output: false
library(tidyverse)
library(readxl)
library(rsample)
library(h2o)
library(recipes)
library(cowplot)
library(glue)
```

## Load the training & test dataset

```{r}
#| output: false
product_backorders_tbl <- read_csv("data/product_backorders.csv")

product_backorders_tbl %>% glimpse()
```

```{r}
#| echo: false
product_backorders_tbl %>% glimpse()
```

```{r}
set.seed(seed = 777)
split_obj <- initial_split(product_backorders_tbl, prop = 0.80)

train_set_tbl <- training(split_obj)
test_set_tbl  <- testing(split_obj)
```

```{r}
recipe_obj <- recipe(went_on_backorder ~., data = train_set_tbl) %>% 
  step_zv(all_predictors()) %>% 
  step_mutate_at(potential_issue,
                 deck_risk,
                 oe_constraint,
                 ppap_risk,
                 stop_auto_buy,
                 rev_stop,
                 went_on_backorder,
                 fn = as.factor) %>% 
  prep()

train_tbl <- bake(recipe_obj, new_data = train_set_tbl)
test_tbl  <- bake(recipe_obj, new_data = test_set_tbl)

train_tbl %>% glimpse()
```

## Specify the response and predictor variables

```{r}
#| output: false
h2o.init()

split_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.80), seed = 767)
train_h2o <- split_h2o[[1]]
valid_h2o <- split_h2o[[2]]
test_h2o  <- as.h2o(test_tbl)

y <- "went_on_backorder"
x <- setdiff(names(train_h2o), y)
```
    
## Run AutoML specifying the stopping criterion

```{r}
#| output: false
automl_models_h2o <- h2o.automl(
  x = x,
  y = y,
  training_frame    = train_h2o,
  validation_frame  = valid_h2o,
  leaderboard_frame = test_h2o,
  max_runtime_secs  = 60,
  nfolds            = 5 
)
```

## View the leaderboard

```{r}
automl_models_h2o@leaderboard
```

## Leaderboard visualization

```{r}
model_leaderboard <- automl_models_h2o@leaderboard %>%
  as_tibble() %>%
  select(-c(aucpr, mean_per_class_error, rmse, mse)) %>%
  mutate(model_type = str_extract(model_id, "[^_]+")) %>%
  rownames_to_column(var = "row_name") %>%
  mutate(model_id   = as_factor(model_id) %>% reorder(auc), 
         model_type = as.factor(model_type)
  ) %>% 
  pivot_longer(cols = -c(model_id, model_type, row_name), 
               names_to = "key", 
               values_to = "value", 
               names_transform = list(key = forcats::fct_inorder)
  ) %>% 
  mutate(model_id = paste0(row_name, ". ", model_id) %>% as_factor() %>% fct_rev())

model_leaderboard %>%
  ggplot(aes(value, model_id, color = model_type)) +
  geom_point(size = 3) +
  geom_label(aes(label = round(value, 2), hjust = "inward")) +
  
  # Facet to break out logloss and auc
  facet_wrap(~ key, scales = "free_x") +
  labs(title = "Leaderboard Metrics",
       subtitle = paste0("Ordered by: ", "auc"),
       y = "Model Position, Model ID", x = "") + 
  theme(legend.position = "bottom")
```

## Tune a model with grid search

```{r}
#| include: false
# Extracts and H2O model name by a position so can more easily use h2o.getModel()
extract_h2o_model_name_by_position <- function(h2o_leaderboard, n = 1, verbose = T) {
    
    model_name <- h2o_leaderboard %>%
        as_tibble() %>%
        slice(n) %>%
        pull(model_id)
    
    if (verbose) message(model_name)
    
    return(model_name)
    
}
```

```{r}
model <- automl_models_h2o@leaderboard %>% 
  extract_h2o_model_name_by_position(9) %>% 
  h2o.getModel()

h2o.performance(model, newdata = as.h2o(test_tbl))
```

```{r}
#| warning: false
model_grid <- h2o.grid(
  algorithm = "glm",
  grid_id = "model_grid",
  x = x,
  y = y,
  training_frame = train_h2o,
  validation_frame = valid_h2o,
  nfolds = 5,
  hyper_params = list(
    alpha = c(0, 0.25, 0.50, 0.75, 1.00),
    lambda = c(0, 0.01, 0.1, 1, 10)
  )
)

h2o.getGrid(grid_id = "model_grid", sort_by = "auc", decreasing = TRUE)
model_grid_5 <- h2o.getModel("model_grid_model_5")
model_grid_5 %>% h2o.auc(train = T, valid = T, xval = T)
```

```{r}
model_grid_5 %>% h2o.performance(newdata = as.h2o(test_tbl))
```

## Visualize the trade-off between the precision and the recall and the optimal threshold

```{r}
#| warning: false
#| output: false
p_model_grid_5 <- model_grid_5 %>% 
  h2o.performance(newdata = as.h2o(test_tbl))

p_model_grid_5_tbl <- p_model_grid_5 %>% 
  h2o.metric() %>%
  as_tibble() %>%
  mutate(auc = h2o.auc(p_model_grid_5))

p_model_grid_5_tbl %>%
  ggplot(aes(x = threshold)) +
  geom_line(aes(y = precision), color = "blue", size = 1) +
  geom_line(aes(y = recall), color = "red", size = 1) +
  geom_vline(xintercept = h2o.find_threshold_by_max_metric(p_model_grid_5, "f1")) +
  labs(title = "Precision vs Recall", y = "value")
```

```{r}
#| echo: false
#| warning: false
p_model_grid_5_tbl <- p_model_grid_5 %>% 
  h2o.metric() %>%
  as_tibble() %>%
  mutate(auc = h2o.auc(p_model_grid_5))

p_model_grid_5_tbl %>%
  ggplot(aes(x = threshold)) +
  geom_line(aes(y = precision), color = "blue", size = 1) +
  geom_line(aes(y = recall), color = "red", size = 1) +
  geom_vline(xintercept = h2o.find_threshold_by_max_metric(p_model_grid_5, "f1")) +
  labs(title = "Precision vs Recall", y = "value")
```

## ROC Plot

```{r}
roc_plot <- p_model_grid_5_tbl %>% 
  mutate(auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%
  ggplot(aes(fpr, tpr, linetype = auc)) +
  geom_line(size = 1) +
  geom_abline(color = "red", linetype = "dotted") +
  labs(
    title = "ROC Plot",
    subtitle = "-"
  )

roc_plot
```

## Precision vs Recall Plot

```{r}
pr_plot <- p_model_grid_5_tbl %>%
  mutate(auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%
  ggplot(aes(recall, precision, linetype = auc)) +
  geom_line(size = 1) +
  labs(
    title = "Precision vs Recall Plot",
    subtitle = "-"
  )

pr_plot
```

## Gain Plot

```{r}
gain_lift_tbl <- p_model_grid_5 %>%
  h2o.gainsLift() %>%
  as_tibble()

gain_transformed_tbl <- gain_lift_tbl %>% 
  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%
  select(-contains("lift")) %>%
  mutate(baseline = cumulative_data_fraction) %>%
  rename(gain     = cumulative_capture_rate) %>%
  # prepare the data for the plotting (for the color and group aesthetics)
  pivot_longer(cols = c(gain, baseline), values_to = "value", names_to = "key")

gain_plot <- gain_transformed_tbl %>%
  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +
  geom_line(size = 1.5) +
  labs(
    title = "Gain Chart",
    x = "Cumulative Data Fraction",
    y = "Gain"
  )

gain_plot
```

## Lift Plot

```{r}
lift_transformed_tbl <- gain_lift_tbl %>% 
  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%
  select(-contains("capture")) %>%
  mutate(baseline = 1) %>%
  rename(lift = cumulative_lift) %>%
  pivot_longer(cols = c(lift, baseline), values_to = "value", names_to = "key")

lift_plot <- lift_transformed_tbl %>%
  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +
  geom_line(size = 1.5) +
  labs(
    title = "Lift Chart",
    x = "Cumulative Data Fraction",
    y = "Lift"
  )

lift_plot
```

## Dashboard with cowplot

```{r}
p_legend <- get_legend(roc_plot)

roc_plot <- roc_plot + theme(legend.position = "none")

p <- plot_grid(roc_plot, pr_plot, gain_plot, lift_plot, ncol = 2)

p_title <- ggdraw() + 
  draw_label("H2O Model Metrics", size = 18, fontface = "bold", color = "#2C3E50")
  
p_subtitle <- ggdraw() + draw_label(glue("-"), size = 10, color = "#2C3E50")
  
combined_plot <- plot_grid(p_title, 
                           p_subtitle, 
                           p, 
                           p_legend, 
                           ncol = 1, 
                           rel_heights = c(0.05, 0.05, 1, 0.05 * 4))
combined_plot
```