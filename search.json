[
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html",
    "href": "code_drafts/data/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html",
    "href": "content/01_journal/01_machine_learning_fundamentals.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "Our organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments."
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#import-libraries",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#import-libraries",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\nlibrary(ggrepel)"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#read-data",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#read-data",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.2 Read Data",
    "text": "3.2 Read Data\n\nsp_500_prices_tbl <- read_rds(\"data/sp_500_prices_tbl.rds\")\nsp_500_index_tbl <- read_rds(\"data/sp_500_index_tbl.rds\")"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.3 Convert stock prices to a standardized format (daily returns)",
    "text": "3.3 Convert stock prices to a standardized format (daily returns)\n\nsp_500_prices_tbl <- sp_500_prices_tbl %>% \n  filter(date >= '2018-01-01') %>%\n  group_by(symbol) %>%\n  mutate(lag = lag(adjusted)) %>%\n  na.omit() %>%\n  mutate(diff = adjusted - lag) %>%\n  mutate(pct_return = diff / lag)\n\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl %>% glimpse()\n\n#> Rows: 141,340\n#> Columns: 3\n#> Groups: symbol [502]\n#> $ symbol     <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MS…\n#> $ date       <date> 2018-01-03, 2018-01-04, 2018-01-05, 2018-01-08, 2018-01-09…\n#> $ pct_return <dbl> 0.0046539123, 0.0088014214, 0.0123981290, 0.0010204489, -0.…"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#convert-to-user-item-format",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#convert-to-user-item-format",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.4 Convert to User-Item Format",
    "text": "3.4 Convert to User-Item Format\n\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>% \n  pivot_wider(names_from = date, values_from = pct_return, values_fill = 0) %>%\n  ungroup()\n\nstock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#perform-k-means-clustering",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#perform-k-means-clustering",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.5 Perform K-Means Clustering",
    "text": "3.5 Perform K-Means Clustering\n\nkmeans_obj <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  kmeans(centers = 4, nstart = 20)\n\nkmeans_obj %>% glance()"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#find-the-optimal-value-of-k",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#find-the-optimal-value-of-k",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.6 Find the optimal value of K",
    "text": "3.6 Find the optimal value of K\nCustom function kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApplying kmeans_mapper() and glance() functions iteratively:\n\nk_means_mapped_tbl <- tibble(centers = 1:30) %>%\n  mutate(k_means = centers %>% map(kmeans_mapper)) %>%\n  mutate(glance  = k_means %>% map(glance))\n\nVisualizing the result as a Scree Plot:\n\nk_means_mapped_tbl %>%\n  unnest(glance) %>%\n  select(centers, tot.withinss) %>%\n  \n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"#2DC6D6\", size = 2) +\n  geom_line(color = \"#2DC6D6\", linewidth = 1) +\n  ggrepel::geom_label_repel(aes(label = centers), color = \"#FF8014\", fill = \"#282A36\", size = 3, label.padding = 0.10, nudge_x = 0.75, nudge_y = 1) + \n  \n  labs(title = \"Scree Plot\",\n       subtitle = \"Total within-cluster sum of squares for various number of centers\",\n       caption = \"Conclusion: Based on the Scree Plot, a value between 5-10 can be chosen for the number of centers.\") +\n  theme(\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#apply-umap",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#apply-umap",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.7 Apply UMAP",
    "text": "3.7 Apply UMAP\nApplying umap() function to the stock_date_matrix_tbl:\n\numap_results <- stock_date_matrix_tbl %>% \n  select(-symbol) %>% \n  umap()\n\nCombining the layout from the umap_results with the symbol column from the stock_date_matrix_tbl:\n\numap_results_tbl <- umap_results$layout %>%\n  as_tibble(.name_repair = \"unique\") %>%\n  set_names(c(\"x\", \"y\")) %>%\n  bind_cols(stock_date_matrix_tbl %>% select(symbol))\n\nVisualizing the umap_results_tbl:\n\numap_results_tbl %>%\n  \n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.5, size = 0.5, color = '#2DC6D6') + \n  geom_label_repel(aes(label = symbol), size = 1, max.overlaps = 15, label.padding = 0.10, color = '#FF8014', seed = 777, nudge_x = 0.25, nudge_y = 0.05, fill = \"#282A36\") + \n  labs(title = 'UMAP 2D Projection') +\n  theme(\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#combine-k-means-and-umap",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#combine-k-means-and-umap",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.8 Combine K-Means and UMAP",
    "text": "3.8 Combine K-Means and UMAP\nPulling out the K-Means for 10 centers:\n\nk_means_obj <- k_means_mapped_tbl %>%\n  pull(k_means) %>%\n  pluck(10)\n\nCombining the clusters from k_means_obj with umap_results_tbl:\n\nk_means_10_clusters_tbl <- k_means_obj %>% \n  augment(stock_date_matrix_tbl) %>%\n  select(symbol, .cluster)\n\numap_kmeans_results_tbl <-  k_means_10_clusters_tbl %>%\n  left_join(umap_results_tbl, by = 'symbol') %>% \n  left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = 'symbol')\n\nVisualizing the K-Means and UMAP results:\n\numap_kmeans_results_tbl %>%\n  mutate(label_text = str_glue(\"Symbol: {symbol}\n                                 Cluster: {.cluster}\")) %>%\n  \n  ggplot(aes(x, y, color = .cluster)) + \n  geom_point(alpha = 0.5, size = 0.5) +\n  geom_label_repel(aes(label = label_text), size = 1,max.overlaps = 15, fill = \"#282A36\", label.padding = 0.10, nudge_x = 0.25, nudge_y = 0.05) +\n  scale_color_discrete() +\n  labs(title = \"Company Segmentation: 2D Projection\",\n       subtitle = \"UMAP 2D Projection with K-Means Cluster Assignment\") +\n  theme(\n    legend.position = \"none\",\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    legend.background = element_blank(),\n    plot.background = element_rect(fill = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html",
    "href": "content/01_journal/02_regression_ii.html",
    "title": "Regression (II)",
    "section": "",
    "text": "Our goal is to figure out what gaps exist in the products of a bike manufacturer and come up with a pricing algorithm that will help us to determine a price, if we were to come up with products in that product category."
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#import-libraries",
    "href": "content/01_journal/02_regression_ii.html#import-libraries",
    "title": "Regression (II)",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(tidyverse)  \nlibrary(parsnip)  \nlibrary(recipes)  \nlibrary(rsample)\nlibrary(workflows)\nlibrary(yardstick)"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#read-data",
    "href": "content/01_journal/02_regression_ii.html#read-data",
    "title": "Regression (II)",
    "section": "\n3.2 Read Data",
    "text": "3.2 Read Data\n\nbike_orderlines_tbl <- readRDS(\"data/bike_orderlines.rds\")\n\nbike_features_tbl <- readRDS(\"data/bike_features_tbl.rds\")\n\nbike_orderlines_tbl %>% glimpse()\n\n#> Rows: 15,644\n#> Columns: 18\n#> $ order_id       <dbl> 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7…\n#> $ order_line     <dbl> 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1…\n#> $ order_date     <dttm> 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-0…\n#> $ model          <chr> \"Spectral CF 7 WMN\", \"Ultimate CF SLX Disc 8.0 ETAP\", \"…\n#> $ model_year     <dbl> 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2…\n#> $ category_1     <chr> \"Mountain\", \"Road\", \"Mountain\", \"Road\", \"Mountain\", \"Hy…\n#> $ category_2     <chr> \"Trail\", \"Race\", \"Trail\", \"Triathlon Bike\", \"Dirt Jump\"…\n#> $ category_3     <chr> \"Spectral\", \"Ultimate\", \"Neuron\", \"Speedmax\", \"Stitched…\n#> $ price          <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#> $ quantity       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1…\n#> $ total_price    <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#> $ frame_material <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"aluminium\", \"c…\n#> $ weight         <dbl> 13.80, 7.44, 14.06, 8.80, 11.50, 8.80, 8.20, 8.85, 14.4…\n#> $ url            <chr> \"https://www.canyon.com/en-de/mountain-bikes/trail-bike…\n#> $ bikeshop       <chr> \"AlexandeRad\", \"AlexandeRad\", \"WITT-RAD\", \"WITT-RAD\", \"…\n#> $ location       <chr> \"Hamburg, Hamburg\", \"Hamburg, Hamburg\", \"Bremen, Bremen…\n#> $ lat            <dbl> 53.57532, 53.57532, 53.07379, 53.07379, 48.78234, 48.78…\n#> $ lng            <dbl> 10.015340, 10.015340, 8.826754, 8.826754, 9.180819, 9.1…\n\n\n\nbike_features_tbl %>% glimpse()\n\n#> Rows: 231\n#> Columns: 67\n#> $ bike_id                     <dbl> 2875, 2873, 2874, 2876, 2877, 2225, 2091, …\n#> $ model                       <chr> \"Aeroad CF SL Disc 8.0 Di2\", \"Aeroad CF SL…\n#> $ model_year                  <dbl> 2020, 2020, 2020, 2020, 2020, 2019, 2019, …\n#> $ frame_material              <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"c…\n#> $ weight                      <dbl> 7.60, 7.27, 7.10, 7.73, 7.83, 6.80, 6.80, …\n#> $ price                       <dbl> 4579, 6919, 6429, 5069, 3609, 6139, 5359, …\n#> $ category_1                  <chr> \"Road\", \"Road\", \"Road\", \"Road\", \"Road\", \"R…\n#> $ category_2                  <chr> \"Race\", \"Race\", \"Race\", \"Race\", \"Race\", \"R…\n#> $ category_3                  <chr> \"Aeroad\", \"Aeroad\", \"Aeroad\", \"Aeroad\", \"A…\n#> $ gender                      <chr> \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"u…\n#> $ url                         <chr> \"https://www.canyon.com/en-de/road-bikes/r…\n#> $ Frame                       <chr> \"Canyon Aeroad CF SL Disc\", \"Canyon Aeroad…\n#> $ Fork                        <chr> \"Canyon FK0041 CF SLX Disc\", \"Canyon FK004…\n#> $ `Rear Derailleur`           <chr> \"Shimano Ultegra Di2 R8050 SS\", \"SRAM RED …\n#> $ `Front Derailleur`          <chr> \"Shimano Ultegra Di2 R8050\", \"SRAM RED eTa…\n#> $ Cassette                    <chr> \"Shimano Ultegra R8000, 11-speed, 11-28T\",…\n#> $ Crank                       <chr> \"Shimano Ultegra R8000\", \"SRAM RED D1\", \"S…\n#> $ `Bottom bracket`            <chr> \"Shimano Pressfit BB72\", \"SRAM Pressfit RE…\n#> $ `Thru Axle`                 <chr> \"Canyon Thru Axle\", \"Canyon Thru Axle\", \"C…\n#> $ Cockpit                     <chr> \"Canyon H36 Aerocockpit CF\", \"Canyon H36 A…\n#> $ Saddle                      <chr> \"Selle Italia SLR\", \"Selle Italia SLR\", \"S…\n#> $ Seatpost                    <chr> \"Canyon S27 Aero VCLS CF\", \"Canyon S27 Aer…\n#> $ Pedals                      <chr> \"None included\", \"None included\", \"None in…\n#> $ `Derailleur hanger`         <chr> \"Shop Derailleur Hanger GP0211-01\", \"Shop …\n#> $ Battery                     <chr> \"\", \"SRAM eTap Powerpack\", \"\", \"SRAM eTap …\n#> $ Brake                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Shift Lever`               <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano Di2 Remot…\n#> $ Chain                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano CN-HG901 …\n#> $ Stem                        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon V13\", …\n#> $ Handlebar                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon H16 Ae…\n#> $ Headset                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Motor                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Battery Charger`           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Flat Pedals`               <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Chainguard                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Aero Bar`                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Brake Lever / Master`      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Wheel Tire System`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Suspension Fork`           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Disc Brake`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Grips                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Chainring                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Display                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Modeswitch                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Rear Shock`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Light                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ Fender                      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Bike Racks`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Brake 1`                   <chr> \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou…\n#> $ `Brake 2`                   <chr> \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou…\n#> $ `Shift-/ Brake Lever 1`     <chr> \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR…\n#> $ `Shift-/ Brake Lever 2`     <chr> \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR…\n#> $ `Wheel 1`                   <chr> \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1…\n#> $ `Wheel 2`                   <chr> \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1…\n#> $ `Tyre 1`                    <chr> \"Continental Grand Prix 5000 / Attack  23 …\n#> $ `Tyre 2`                    <chr> \"Continental Grand Prix 5000, 25 mm\", \"Con…\n#> $ `Handlebar Tape 1`          <chr> \"Canyon Ergospeed Gel\", \"Canyon Ergospeed …\n#> $ `Handlebar Tape 2`          <chr> \"Canyon bar-end plug\", \"Canyon bar-end plu…\n#> $ `Manuals and Accessories 1` <chr> \"Canyon tool case\", \"Canyon tool case\", \"C…\n#> $ `Manuals and Accessories 2` <chr> \"DT Swiss warranty & intended use manual\",…\n#> $ `Manuals and Accessories 3` <chr> \"Canyon starter box\", \"Canyon starter box\"…\n#> $ `Manuals and Accessories 4` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"BAG R…\n#> $ `Manuals and Accessories 5` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Manuals and Accessories 6` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Manuals and Accessories 7` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Manuals and Accessories 8` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"…\n#> $ `Brake Rotor`               <list> \"Shimano RT800\", \"SRAM Centerline X\", \"Sh…"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#data-exploration",
    "href": "content/01_journal/02_regression_ii.html#data-exploration",
    "title": "Regression (II)",
    "section": "\n3.3 Data Exploration",
    "text": "3.3 Data Exploration\nWe will visualize the data to determine possible product gaps. It would be interesting to see the sales for each category_2 separated by the frame material. However, we do not have the sales number. Instead, we will use the stock numbers as a proxy:\n\nmodel_num_sold_tbl <- bike_orderlines_tbl %>% \n  select(quantity, model) %>%\n  group_by(model) %>%\n  summarise(num_sold = sum(quantity)) %>%\n  ungroup() %>%\n  arrange(desc(num_sold))\n\nmodel_sales_tbl <- bike_orderlines_tbl %>% \n  select(total_price, model, category_2, frame_material) %>% \n  group_by(model, category_2, frame_material) %>%\n  summarise(revenue = sum(total_price)) %>%\n  ungroup() %>%\n  arrange(desc(revenue))\n\nmodel_sales_tbl <- model_sales_tbl %>% \n  inner_join(model_num_sold_tbl)\n\nmodel_sales_tbl\n\n\n\n\n\n  \n\n\n\nVisualizing the model_sales_tbl:\n\nmodel_sales_tbl %>% \n  mutate(category_2 = as_factor(category_2) %>% \n           fct_reorder(revenue, .fun = max) %>% \n           fct_rev()) %>% \n  \n  ggplot(aes(frame_material, revenue)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2DC6D6\") +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, \n                                                    suffix = \"M\", \n                                                    accuracy = 0.1)) +\n  labs(title = \"Total Sales for Each Model\",\n    x = \"Frame Material\", y = \"Revenue\") +\n  theme(\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#create-the-model",
    "href": "content/01_journal/02_regression_ii.html#create-the-model",
    "title": "Regression (II)",
    "section": "\n3.4 Create the model",
    "text": "3.4 Create the model\nCreate a parsnip specification for linear regression:\n\nlinear_model <- linear_reg(\"regression\") %>% set_engine(\"lm\")"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#split-the-data",
    "href": "content/01_journal/02_regression_ii.html#split-the-data",
    "title": "Regression (II)",
    "section": "\n3.5 Split the data",
    "text": "3.5 Split the data\nSplit the data into training and test sets:\n\nset.seed(1036)\nsplit_obj <- initial_split(bike_features_tbl, prop = 0.80, strata = \"category_2\")\n\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\n\ntrain_tbl <- train_tbl %>%\n  set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  <- test_tbl  %>% \n  set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#create-the-recipe",
    "href": "content/01_journal/02_regression_ii.html#create-the-recipe",
    "title": "Regression (II)",
    "section": "\n3.6 Create the recipe",
    "text": "3.6 Create the recipe\nTo determine the price of bikes we will use category_2, frame_material and Rear_Derailleur. Since they are not numeric, we will create dummy variables from them:\n\nsales_rec <- recipe(price ~ ., data = train_tbl %>% \n                      select(-c(bike_id:model_year), \n                             -weight, \n                             -category_1, \n                             -c(category_3:Fork), \n                             -c(Front_Derailleur:Brake_Rotor))) %>% \n  step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %>%\n  step_zv(all_predictors()) %>%\n  prep()\n\nsales_rec\n\n#> \n\n\n#> ── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n#> \n\n\n#> ── Inputs\n\n\n#> Number of variables by role\n\n\n#> outcome:   1\n#> predictor: 3\n\n\n#> \n\n\n#> ── Training information\n\n\n#> Training data contained 184 data points and no incomplete rows.\n\n\n#> \n\n\n#> ── Operations\n\n\n#> • Dummy variables from: frame_material, category_2, Rear_Derailleur | Trained\n\n\n#> • Zero variance filter removed: <none> | Trained"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#create-the-workflow",
    "href": "content/01_journal/02_regression_ii.html#create-the-workflow",
    "title": "Regression (II)",
    "section": "\n3.7 Create the workflow",
    "text": "3.7 Create the workflow\nBundle the linear_model and sales_rec together:\n\nsales_wflow <- workflow() %>% \n  add_model(linear_model) %>% \n  add_recipe(sales_rec)\n\nsales_wflow\n\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: linear_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> Linear Regression Model Specification (regression)\n#> \n#> Computational engine: lm\n\n\nFit the model to the training data:\n\nsales_fit <- sales_wflow %>% fit(data = train_tbl)"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#evaluate-the-model",
    "href": "content/01_journal/02_regression_ii.html#evaluate-the-model",
    "title": "Regression (II)",
    "section": "\n3.8 Evaluate the model",
    "text": "3.8 Evaluate the model\nEvaluate the model using calc_metrics() helper function:\n\nsales_fit %>% calc_metrics(test_tbl)\n\n\n\n  \n\n\n\nFrom the metrics, it is seen that our linear regression model has acceptable performance."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html",
    "href": "content/01_journal/03_aml_with_h2o_i.html",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "Attrition is a problem that impacts all businesses, irrespective of geography, industry and size of the company. Employee attrition leads to significant costs for a business, including the cost of business disruption, hiring new staff and training new staff.\nWe will use classification models to predict if an employee is likely to quit so that the situation can be intervened on time and remedied to prevent attrition."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#import-libraries",
    "href": "content/01_journal/03_aml_with_h2o_i.html#import-libraries",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(tidyverse)\nlibrary(GGally)"
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#read-data",
    "href": "content/01_journal/03_aml_with_h2o_i.html#read-data",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.2 Read Data",
    "text": "3.2 Read Data\n\nemployee_attrition_tbl <- read_csv(\n  \"data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n\n\n#> Rows: 1,470\n#> Columns: 35\n#> $ Age                      <dbl> 41, 49, 37, 33, 27, 32, 59, 30, 38, 36, 35, 2…\n#> $ Attrition                <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"…\n#> $ BusinessTravel           <chr> \"Travel_Rarely\", \"Travel_Frequently\", \"Travel…\n#> $ DailyRate                <dbl> 1102, 279, 1373, 1392, 591, 1005, 1324, 1358,…\n#> $ Department               <chr> \"Sales\", \"Research & Development\", \"Research …\n#> $ DistanceFromHome         <dbl> 1, 8, 2, 3, 2, 2, 3, 24, 23, 27, 16, 15, 26, …\n#> $ Education                <dbl> 2, 1, 2, 4, 1, 2, 3, 1, 3, 3, 3, 2, 1, 2, 3, …\n#> $ EducationField           <chr> \"Life Sciences\", \"Life Sciences\", \"Other\", \"L…\n#> $ EmployeeCount            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n#> $ EmployeeNumber           <dbl> 1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16,…\n#> $ EnvironmentSatisfaction  <dbl> 2, 3, 4, 4, 1, 4, 3, 4, 4, 3, 1, 4, 1, 2, 3, …\n#> $ Gender                   <chr> \"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"…\n#> $ HourlyRate               <dbl> 94, 61, 92, 56, 40, 79, 81, 67, 44, 94, 84, 4…\n#> $ JobInvolvement           <dbl> 3, 2, 2, 3, 3, 3, 4, 3, 2, 3, 4, 2, 3, 3, 2, …\n#> $ JobLevel                 <dbl> 2, 2, 1, 1, 1, 1, 1, 1, 3, 2, 1, 2, 1, 1, 1, …\n#> $ JobRole                  <chr> \"Sales Executive\", \"Research Scientist\", \"Lab…\n#> $ JobSatisfaction          <dbl> 4, 2, 3, 3, 2, 4, 1, 3, 3, 3, 2, 3, 3, 4, 3, …\n#> $ MaritalStatus            <chr> \"Single\", \"Married\", \"Single\", \"Married\", \"Ma…\n#> $ MonthlyIncome            <dbl> 5993, 5130, 2090, 2909, 3468, 3068, 2670, 269…\n#> $ MonthlyRate              <dbl> 19479, 24907, 2396, 23159, 16632, 11864, 9964…\n#> $ NumCompaniesWorked       <dbl> 8, 1, 6, 1, 9, 0, 4, 1, 0, 6, 0, 0, 1, 0, 5, …\n#> $ Over18                   <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", …\n#> $ OverTime                 <chr> \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\",…\n#> $ PercentSalaryHike        <dbl> 11, 23, 15, 11, 12, 13, 20, 22, 21, 13, 13, 1…\n#> $ PerformanceRating        <dbl> 3, 4, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, …\n#> $ RelationshipSatisfaction <dbl> 1, 4, 2, 3, 4, 3, 1, 2, 2, 2, 3, 4, 4, 3, 2, …\n#> $ StandardHours            <dbl> 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 8…\n#> $ StockOptionLevel         <dbl> 0, 1, 0, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1, 1, 0, …\n#> $ TotalWorkingYears        <dbl> 8, 10, 7, 8, 6, 8, 12, 1, 10, 17, 6, 10, 5, 3…\n#> $ TrainingTimesLastYear    <dbl> 0, 3, 3, 3, 3, 2, 3, 2, 2, 3, 5, 3, 1, 2, 4, …\n#> $ WorkLifeBalance          <dbl> 1, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 2, 3, 3, …\n#> $ YearsAtCompany           <dbl> 6, 10, 0, 8, 2, 7, 1, 1, 9, 7, 5, 9, 5, 2, 4,…\n#> $ YearsInCurrentRole       <dbl> 4, 7, 0, 7, 2, 7, 0, 0, 7, 7, 4, 5, 2, 2, 2, …\n#> $ YearsSinceLastPromotion  <dbl> 0, 1, 0, 3, 2, 3, 0, 0, 1, 7, 0, 0, 4, 1, 0, …\n#> $ YearsWithCurrManager     <dbl> 5, 7, 0, 0, 2, 6, 0, 0, 8, 7, 3, 8, 3, 2, 3, …"
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#compensation-features",
    "href": "content/01_journal/03_aml_with_h2o_i.html#compensation-features",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.3 Compensation Features",
    "text": "3.3 Compensation Features\n\n\n\n\n\n\n\n\nQuestion: What can you deduce about the interaction between Monthly Income and Attrition?\na. Those that are leaving the company have a higher Monthly Income\nb. That those are staying have a lower Monthly Income\nc. Those that are leaving have a lower Monthly Income\nd. It's difficult to deduce anything based on the visualization\nAnswer: Looking at the second figure in the diagonal it can be seen that the employees that are leaving have a peak at a lower monthly income value compared to those that are staying. The answer is c.\nQuestion: What can you deduce about the interaction between Percent Salary Hike and Attrition?\na. Those that are leaving the company have a higher Percent Salary Hike\nb. Those that are staying have a lower Percent Salary Hike\nc. Those that are leaving have lower Percent Salary Hike\nd. It's difficult to deduce anything based on the visualization\nAnswer: Looking at the sixth figure in the diagonal, it is seen that distributions for both employee groups are similar so it is difficult to make any comments. The answer is d.\nQuestion: What can you deduce about the interaction between Stock Option Level and Attrition?\na. Those that are leaving the company have a higher stock option level\nb. Those that are staying have a higher stock option level\nc. It's difficult to deduce anything based on the visualization\nAnswer: Since the number of staying employees are concentrated around higher stock option levels (1, 2) compared to the employees that are leaving (0) the answer is b."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#survey-results",
    "href": "content/01_journal/03_aml_with_h2o_i.html#survey-results",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.4 Survey results",
    "text": "3.4 Survey results\n\n\n\n\n\n\n\n\nQuestion: What can you deduce about the interaction between Environment Satisfaction and Attrition?\na. A higher proportion of those leaving have a low environment satisfaction level\nb. A higher proportion of those leaving have a high environment satisfaction level\nc. It's difficult to deduce anything based on the visualization\nAnswer: It is difficult to make a comment since it is not clearly defined what ‘high’ and ‘low’ satisfaction are. The answer is c.\nQuestion: What can you deduce about the interaction between Work Life Balance and Attrition\na. Those that are leaving have higher density of 2's and 3's\nb. Those that are staying have a higher density of 2's and 3's\nc. Those that are staying have a lower density of 2's and 3's\nd. It's difficult to deduce anything based on the visualization\nAnswer: From the fifth figure in the diagonal, it can be seen that staying employees have a higher density of 2’s and 3’s. The answer is b."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#performance-data",
    "href": "content/01_journal/03_aml_with_h2o_i.html#performance-data",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.5 Performance Data",
    "text": "3.5 Performance Data\n\n\n\n\n\n\n\n\nQuestion: What Can you deduce about the interaction between Job Involvement and Attrition?\na. Those that are leaving have a lower density of 3's and 4's\nb. Those that are leaving have a lower density of 1's and 2's\nc. Those that are staying have a lower density of 2's and 3's\nd. It's difficult to deduce anything based on the visualization\nAnswer: From the figure, it can be seen that leaving employees have a lower density of 3’s and 4’s. The answer is a."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#work-life-features",
    "href": "content/01_journal/03_aml_with_h2o_i.html#work-life-features",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.6 Work-Life Features",
    "text": "3.6 Work-Life Features\n\n\n\n\n\n\n\n\nQuestion: What can you deduce about the interaction between Over Time and Attrition?\na. The proportion of those leaving that are working Over Time are high compared to those that are not leaving\nb. The proportion of those staying that are working Over Time are high compared to those that are not staying\nAnswer: Regarding Over Time, proportion of staying employees is higher in both groups. The answer is b."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#training-and-education",
    "href": "content/01_journal/03_aml_with_h2o_i.html#training-and-education",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.7 Training and Education",
    "text": "3.7 Training and Education\n\n\n\n\n\n\n\n\nQuestion: What can you deduce about the interaction between Training Times Last Year and Attrition\na. People that leave tend to have more annual trainings\nb. People that leave tend to have less annual trainings\nc. It's difficult to deduce anything based on the visualization\nAnswer: From the figure it is seen that distributions of both groups concentrate around similar values. The answer is c."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#time-based-features",
    "href": "content/01_journal/03_aml_with_h2o_i.html#time-based-features",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.8 Time-Based Features",
    "text": "3.8 Time-Based Features\n\n\n\n\n\n\n\n\nQuestion: What can you deduce about the interaction between Years At Company and Attrition\na. People that leave tend to have more working years at the company\nb. People that leave tend to have less working years at the company\nc. It's difficult to deduce anything based on the visualization\nAnswer: It is apparent that people that leave tend to have less working years at the company because corresponding distribution peaks at a smaller value. The answer is b.\nQuestion: What can you deduce about the interaction between Years Since Last Promotion and Attrition?\na. Those that are leaving have more years since last promotion than those that are staying\nb. Those that are leaving have fewer years since last promotion than those that are staying\nc. It's difficult to deduce anything based on the visualization\nAnswer: Since both distributions peak at the lower end of the x axis and they are similar in other parts it is hard to make a decision. The answer is c."
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html",
    "href": "content/01_journal/04_aml_with_h2o_ii.html",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "",
    "text": "For the challenge, we shall be working with a Product Backorders dataset. The goal here is to predict whether or not a product will be put on backorder status, given a number of product metrics such as current inventory, transit time, demand forecasts and prior sales. It’s a classic Binary Classification problem."
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#import-libraries",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#import-libraries",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(tidyverse)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(readxl)\nlibrary(h2o)"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#load-the-training-test-dataset",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#load-the-training-test-dataset",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.2 Load the training & test dataset",
    "text": "3.2 Load the training & test dataset\n\nproduct_backorders_tbl <- read_csv(\"data/product_backorders.csv\")\n\nproduct_backorders_tbl %>% glimpse()\n\n\n\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n\nSplit the data into training and test sets:\n\nset.seed(seed = 777)\nsplit_obj <- initial_split(product_backorders_tbl, prop = 0.80)\n\ntrain_set_tbl <- training(split_obj)\ntest_set_tbl  <- testing(split_obj)\n\nSince some columns such as deck_risk are not numeric, they have to be converted into factor. The recipe below will take care of that:\n\nrecipe_obj <- recipe(went_on_backorder ~., data = train_set_tbl) %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(potential_issue,\n                 deck_risk,\n                 oe_constraint,\n                 ppap_risk,\n                 stop_auto_buy,\n                 rev_stop,\n                 went_on_backorder,\n                 fn = as.factor) %>% \n  prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_set_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_set_tbl)\n\ntrain_tbl %>% glimpse()\n\n#> Rows: 15,242\n#> Columns: 23\n#> $ sku               <dbl> 1370478, 1423347, 1704266, 2258894, 3000725, 2888766…\n#> $ national_inv      <dbl> 4, 59, 1, 9, 151, 6, 195, 66, 52, 0, 25, 1, 4, 2, 10…\n#> $ lead_time         <dbl> 12, NA, 8, 2, 8, 2, 8, 8, 14, 2, 4, 4, 8, 8, 2, 8, 5…\n#> $ in_transit_qty    <dbl> 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ forecast_3_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 122, 20, 0, 9, 15, 0, 28, 0, 0,…\n#> $ forecast_6_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 214, 35, 0, 18, 15, 0, 61, 0, 0…\n#> $ forecast_9_month  <dbl> 1, 0, 0, 0, 0, 0, 0, 306, 65, 0, 18, 21, 0, 94, 0, 0…\n#> $ sales_1_month     <dbl> 1, 0, 1, 0, 0, 0, 2, 36, 13, 0, 9, 4, 0, 3, 0, 0, 0,…\n#> $ sales_3_month     <dbl> 1, 7, 1, 0, 15, 0, 4, 119, 31, 0, 24, 9, 0, 26, 0, 0…\n#> $ sales_6_month     <dbl> 3, 20, 1, 0, 27, 0, 12, 209, 78, 0, 43, 15, 0, 56, 0…\n#> $ sales_9_month     <dbl> 3, 28, 1, 3, 43, 0, 16, 322, 121, 0, 75, 22, 1, 82, …\n#> $ min_bank          <dbl> 0, 0, 0, 0, 7, 0, 1, 45, 21, 1, 0, 2, 1, 6, 0, 0, 1,…\n#> $ potential_issue   <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ pieces_past_due   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.87, -99.00, 0.99, 0.99, 0.98, 0.98, 0.88, 0.98, 0.…\n#> $ perf_12_month_avg <dbl> 0.67, -99.00, 0.98, 0.99, 0.96, 0.99, 0.91, 0.99, 0.…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ deck_risk         <fct> No, Yes, No, Yes, No, No, No, No, No, No, No, No, No…\n#> $ oe_constraint     <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ ppap_risk         <fct> No, Yes, No, No, No, No, No, No, Yes, No, No, No, No…\n#> $ stop_auto_buy     <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n#> $ rev_stop          <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ went_on_backorder <fct> No, No, Yes, No, No, No, No, No, No, No, No, Yes, No…"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#specify-the-response-and-predictor-variables",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#specify-the-response-and-predictor-variables",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.3 Specify the response and predictor variables",
    "text": "3.3 Specify the response and predictor variables\nTo determine the backorder status went_on_backorder, all the other columns will be used as predictors:\n\nh2o.init()\n\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.80), seed = 767)\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#run-automl-specifying-the-stopping-criterion",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#run-automl-specifying-the-stopping-criterion",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.4 Run AutoML specifying the stopping criterion",
    "text": "3.4 Run AutoML specifying the stopping criterion\nSet 30 seconds for max_runtime_secs and 5 for nfolds:\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#view-the-leaderboard",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#view-the-leaderboard",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.5 View the leaderboard",
    "text": "3.5 View the leaderboard\n\nautoml_models_h2o@leaderboard\n\n#>                                                  model_id       auc   logloss\n#> 1                          GBM_1_AutoML_1_20230606_235930 0.9217779 0.2278932\n#> 2 StackedEnsemble_BestOfFamily_1_AutoML_1_20230606_235930 0.9216773 0.2214933\n#> 3                          DRF_1_AutoML_1_20230606_235930 0.7456369 2.7271022\n#> 4                          GLM_1_AutoML_1_20230606_235930 0.7403997 0.3303213\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.6257940            0.1667248 0.2612527 0.06825299\n#> 2 0.6303983            0.1693529 0.2611982 0.06822452\n#> 3 0.3779712            0.2808203 0.3280305 0.10760404\n#> 4 0.2842939            0.3237555 0.3133306 0.09817608\n#> \n#> [4 rows x 7 columns]"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#predicting-using-leader-model",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#predicting-using-leader-model",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.6 Predicting using Leader Model",
    "text": "3.6 Predicting using Leader Model\nExtract the first model of the leaderboard:\n\nleader_model <- automl_models_h2o@leaderboard %>% \n  extract_h2o_model_name_by_position(1) %>% \n  h2o.getModel()\n\n#> GBM_1_AutoML_1_20230606_235930\n\n\nUse the extracted model to make predictions on the test set:\n\npredictions <- h2o.predict(leader_model, newdata = as.h2o(test_tbl))\n\npredictions_tbl <- predictions %>% as_tibble()\n\npredictions_tbl %>% glimpse()\n\n\n\n#> Rows: 3,811\n#> Columns: 3\n#> $ predict <fct> Yes, Yes, Yes, Yes, No, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes…\n#> $ No      <dbl> 0.7289282, 0.5590327, 0.5837228, 0.4468112, 0.8088230, 0.57161…\n#> $ Yes     <dbl> 0.27107175, 0.44096726, 0.41627720, 0.55318882, 0.19117701, 0.…"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#save-the-leader-model",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#save-the-leader-model",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.7 Save the leader model",
    "text": "3.7 Save the leader model\nSave the extracted model in case it is needed later:\n\nleader_model %>% h2o.saveModel(path = \"h2o_models/\")"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html",
    "href": "content/01_journal/05_performance_measures.html",
    "title": "Performance Measures",
    "section": "",
    "text": "For the challenge, we will continue working on the Product Backorders dataset. The goal here is to visualize various performance metrics of H2O models to simplify evaluation of them."
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#import-libraries",
    "href": "content/01_journal/05_performance_measures.html#import-libraries",
    "title": "Performance Measures",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(rsample)\nlibrary(h2o)\nlibrary(recipes)\nlibrary(cowplot)\nlibrary(glue)"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#load-the-training-test-dataset",
    "href": "content/01_journal/05_performance_measures.html#load-the-training-test-dataset",
    "title": "Performance Measures",
    "section": "\n3.2 Load the training & test dataset",
    "text": "3.2 Load the training & test dataset\n\nproduct_backorders_tbl <- read_csv(\"data/product_backorders.csv\")\n\nproduct_backorders_tbl %>% glimpse()\n\n\n\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n\nSplit the data into training and test sets:\n\nset.seed(seed = 777)\nsplit_obj <- initial_split(product_backorders_tbl, prop = 0.80)\n\ntrain_set_tbl <- training(split_obj)\ntest_set_tbl  <- testing(split_obj)\n\nSince some columns such as deck_risk are not numeric, they have to be converted into factor. The recipe below will take care of that:\n\nrecipe_obj <- recipe(went_on_backorder ~., data = train_set_tbl) %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(potential_issue,\n                 deck_risk,\n                 oe_constraint,\n                 ppap_risk,\n                 stop_auto_buy,\n                 rev_stop,\n                 went_on_backorder,\n                 fn = as.factor) %>% \n  prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_set_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_set_tbl)\n\ntrain_tbl %>% glimpse()\n\n#> Rows: 15,242\n#> Columns: 23\n#> $ sku               <dbl> 1370478, 1423347, 1704266, 2258894, 3000725, 2888766…\n#> $ national_inv      <dbl> 4, 59, 1, 9, 151, 6, 195, 66, 52, 0, 25, 1, 4, 2, 10…\n#> $ lead_time         <dbl> 12, NA, 8, 2, 8, 2, 8, 8, 14, 2, 4, 4, 8, 8, 2, 8, 5…\n#> $ in_transit_qty    <dbl> 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ forecast_3_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 122, 20, 0, 9, 15, 0, 28, 0, 0,…\n#> $ forecast_6_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 214, 35, 0, 18, 15, 0, 61, 0, 0…\n#> $ forecast_9_month  <dbl> 1, 0, 0, 0, 0, 0, 0, 306, 65, 0, 18, 21, 0, 94, 0, 0…\n#> $ sales_1_month     <dbl> 1, 0, 1, 0, 0, 0, 2, 36, 13, 0, 9, 4, 0, 3, 0, 0, 0,…\n#> $ sales_3_month     <dbl> 1, 7, 1, 0, 15, 0, 4, 119, 31, 0, 24, 9, 0, 26, 0, 0…\n#> $ sales_6_month     <dbl> 3, 20, 1, 0, 27, 0, 12, 209, 78, 0, 43, 15, 0, 56, 0…\n#> $ sales_9_month     <dbl> 3, 28, 1, 3, 43, 0, 16, 322, 121, 0, 75, 22, 1, 82, …\n#> $ min_bank          <dbl> 0, 0, 0, 0, 7, 0, 1, 45, 21, 1, 0, 2, 1, 6, 0, 0, 1,…\n#> $ potential_issue   <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ pieces_past_due   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.87, -99.00, 0.99, 0.99, 0.98, 0.98, 0.88, 0.98, 0.…\n#> $ perf_12_month_avg <dbl> 0.67, -99.00, 0.98, 0.99, 0.96, 0.99, 0.91, 0.99, 0.…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ deck_risk         <fct> No, Yes, No, Yes, No, No, No, No, No, No, No, No, No…\n#> $ oe_constraint     <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ ppap_risk         <fct> No, Yes, No, No, No, No, No, No, Yes, No, No, No, No…\n#> $ stop_auto_buy     <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n#> $ rev_stop          <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ went_on_backorder <fct> No, No, Yes, No, No, No, No, No, No, No, No, Yes, No…"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#specify-the-response-and-predictor-variables",
    "href": "content/01_journal/05_performance_measures.html#specify-the-response-and-predictor-variables",
    "title": "Performance Measures",
    "section": "\n3.3 Specify the response and predictor variables",
    "text": "3.3 Specify the response and predictor variables\nTo determine the backorder status went_on_backorder, all the other columns will be used as predictors:\n\nh2o.init()\n\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.80), seed = 767)\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#run-automl-specifying-the-stopping-criterion",
    "href": "content/01_journal/05_performance_measures.html#run-automl-specifying-the-stopping-criterion",
    "title": "Performance Measures",
    "section": "\n3.4 Run AutoML specifying the stopping criterion",
    "text": "3.4 Run AutoML specifying the stopping criterion\nSet 30 seconds for max_runtime_secs and 5 for nfolds:\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 600,\n  max_models = 15,\n  nfolds            = 5,\n  include_algos = c(\"DeepLearning\", \"GBM\", \"XGBoost\", \"GLM\", \"DRF\")\n)"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#view-the-leaderboard",
    "href": "content/01_journal/05_performance_measures.html#view-the-leaderboard",
    "title": "Performance Measures",
    "section": "\n3.5 View the leaderboard",
    "text": "3.5 View the leaderboard\n\nautoml_models_h2o@leaderboard\n\n#>                                     model_id       auc   logloss     aucpr\n#> 1              GBM_3_AutoML_1_20230612_84439 0.9460585 0.1782440 0.7492513\n#> 2              GBM_1_AutoML_1_20230612_84439 0.9454817 0.1792050 0.7391388\n#> 3 GBM_grid_1_AutoML_1_20230612_84439_model_3 0.9453233 0.1782869 0.7453088\n#> 4              GBM_2_AutoML_1_20230612_84439 0.9448476 0.1790129 0.7546212\n#> 5              DRF_1_AutoML_1_20230612_84439 0.9433694 0.2031015 0.7311273\n#> 6              GBM_4_AutoML_1_20230612_84439 0.9427084 0.1797984 0.7508803\n#>   mean_per_class_error      rmse        mse\n#> 1            0.1452358 0.2284730 0.05219991\n#> 2            0.1746839 0.2304370 0.05310123\n#> 3            0.1600785 0.2282351 0.05209127\n#> 4            0.1586459 0.2289302 0.05240905\n#> 5            0.1692491 0.2448786 0.05996551\n#> 6            0.1716661 0.2288689 0.05238100\n#> \n#> [12 rows x 7 columns]"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#leaderboard-visualization",
    "href": "content/01_journal/05_performance_measures.html#leaderboard-visualization",
    "title": "Performance Measures",
    "section": "\n3.6 Leaderboard visualization",
    "text": "3.6 Leaderboard visualization\nFirst, leaderboard will be converted into long format to be able to visualize it easier:\n\nmodel_leaderboard <- automl_models_h2o@leaderboard %>%\n  as_tibble() %>%\n  select(-c(aucpr, mean_per_class_error, rmse, mse)) %>%\n  mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n  rownames_to_column(var = \"row_name\") %>%\n  mutate(model_id   = as_factor(model_id) %>% reorder(auc), \n         model_type = as.factor(model_type)) %>% \n  pivot_longer(cols = -c(model_id, model_type, row_name), \n               names_to = \"key\", \n               values_to = \"value\", \n               names_transform = list(key = forcats::fct_inorder)) %>% \n  mutate(model_id = paste0(row_name, \". \", model_id) %>% as_factor() %>% fct_rev())\n\nmodel_leaderboard %>% glimpse()\n\n#> Rows: 24\n#> Columns: 5\n#> $ row_name   <chr> \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", \"6\",…\n#> $ model_id   <fct> 1. GBM_3_AutoML_1_20230612_84439, 1. GBM_3_AutoML_1_2023061…\n#> $ model_type <fct> GBM, GBM, GBM, GBM, GBM, GBM, GBM, GBM, DRF, DRF, GBM, GBM,…\n#> $ key        <fct> auc, logloss, auc, logloss, auc, logloss, auc, logloss, auc…\n#> $ value      <dbl> 0.9460585, 0.1782440, 0.9454817, 0.1792050, 0.9453233, 0.17…\n\n\nVisualize the long format leaderboard:\n\nmodel_leaderboard %>%\n  ggplot(aes(value, model_id, color = model_type)) +\n  geom_point(size = 3) +\n  geom_label(aes(label = round(value, 3), hjust = \"inward\"), label.padding = unit(0.10, \"lines\"), size = 3) +\n  facet_wrap(~ key, scales = \"free_x\") +\n  labs(title = \"Leaderboard Metrics\",\n       subtitle = paste0(\"Ordered by: \", \"auc\"),\n       y = \"Model Position, Model ID\",\n       x = \"\",\n       col = \"Model Type\") + \n  theme(\n    legend.position = \"bottom\",\n    legend.background = element_rect(fill = NA, color = \"white\"),\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\", color = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\", size = 7),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\", size = 6),\n  )\n\n\n\n\n\n\n\nFrom the figure, it is seen that AUC and LogLoss metrics behave mostly as expected. Generally with increasing model performance, an increase in AUC and a decrease in LogLoss is observed."
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#tune-a-model-with-grid-search",
    "href": "content/01_journal/05_performance_measures.html#tune-a-model-with-grid-search",
    "title": "Performance Measures",
    "section": "\n3.7 Tune a model with grid search",
    "text": "3.7 Tune a model with grid search\nA Deep Learning model will be tuned in this section. First, the Deep Learning model from the leaderboard is extracted to be used for comparison purposes:\n\ndl_model_automl <- automl_models_h2o@leaderboard %>% \n  extract_h2o_model_name_by_position(11) %>% \n  h2o.getModel()\n\n#> DeepLearning_1_AutoML_1_20230612_84439\n\n\n\np_dl_model_automl <- h2o.performance(dl_model_automl, newdata = as.h2o(test_tbl))\n\np_dl_model_automl\n\n\n\n#> H2OBinomialMetrics: deeplearning\n#> \n#> MSE:  0.09505643\n#> RMSE:  0.3083122\n#> LogLoss:  0.321205\n#> Mean Per-Class Error:  0.3228888\n#> AUC:  0.7750419\n#> AUCPR:  0.350434\n#> Gini:  0.5500839\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2905 441 0.131799  =441/3346\n#> Yes     239 226 0.513978   =239/465\n#> Totals 3144 667 0.178431  =680/3811\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.238236    0.399293 141\n#> 2                       max f2  0.179913    0.526316 212\n#> 3                 max f0point5  0.306734    0.385791  85\n#> 4                 max accuracy  0.386126    0.884807  52\n#> 5                max precision  0.946199    1.000000   0\n#> 6                   max recall  0.000058    1.000000 399\n#> 7              max specificity  0.946199    1.000000   0\n#> 8             max absolute_mcc  0.238236    0.305113 141\n#> 9   max min_per_class_accuracy  0.194376    0.699342 195\n#> 10 max mean_per_class_accuracy  0.179913    0.708168 212\n#> 11                     max tns  0.946199 3346.000000   0\n#> 12                     max fns  0.946199  464.000000   0\n#> 13                     max fps  0.000058 3346.000000 399\n#> 14                     max tps  0.000058  465.000000 399\n#> 15                     max tnr  0.946199    1.000000   0\n#> 16                     max fnr  0.946199    0.997849   0\n#> 17                     max fpr  0.000058    1.000000 399\n#> 18                     max tpr  0.000058    1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n\n\nIt is seen that this model has an AUC value of 0.775 and a LogLoss value of 0.321. Using grid search, there is a possibility to find a model with better performance metrics.\nUse the hyperparameters hidden and epochs for tuning:\nhidden: Hidden layer size. \nlambda: The number of times to iterate the data set.\n\nmodel_grid <- h2o.grid(\n  algorithm = \"deeplearning\",\n  grid_id = \"deeplearning_grid_01\",\n  x = x,\n  y = y,\n  training_frame = train_h2o,\n  validation_frame = valid_h2o,\n  max_runtime_secs  = 600,\n  nfolds = 5,\n  hyper_params = list(\n    #activation = c(\"tanh\", \"rectifier\"),\n    hidden = list(c(10, 10), c(15, 15), c(10, 10, 10), c(15, 15, 15)),\n    epochs = c(50, 100, 200)\n  )\n)\n\nGet the grid search result and order models by decreasing AUC:\n\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: deeplearning_grid_01 \n#> Used hyper parameters: \n#>   -  epochs \n#>   -  hidden \n#> Number of models: 12 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by decreasing auc\n#>       epochs       hidden                     model_ids     auc\n#> 1  204.75291 [10, 10, 10]  deeplearning_grid_01_model_9 0.89661\n#> 2  203.22186     [15, 15]  deeplearning_grid_01_model_6 0.88974\n#> 3  204.79010 [15, 15, 15] deeplearning_grid_01_model_12 0.88580\n#> 4  103.99907 [10, 10, 10]  deeplearning_grid_01_model_8 0.88199\n#> 5  203.19357     [10, 10]  deeplearning_grid_01_model_3 0.87900\n#> 6  104.00621 [15, 15, 15] deeplearning_grid_01_model_11 0.86775\n#> 7  103.98990     [10, 10]  deeplearning_grid_01_model_2 0.86551\n#> 8  103.99660     [15, 15]  deeplearning_grid_01_model_5 0.86497\n#> 9   52.01461     [10, 10]  deeplearning_grid_01_model_1 0.84500\n#> 10  52.00563 [15, 15, 15] deeplearning_grid_01_model_10 0.84160\n#> 11  51.99446 [10, 10, 10]  deeplearning_grid_01_model_7 0.83979\n#> 12  51.98538     [15, 15]  deeplearning_grid_01_model_4 0.83636\n\n\nExtract the leader model of the grid search:\n\ndl_model_grid_search <- h2o.getModel(\"deeplearning_grid_01_model_9\")\n\n\ndl_model_grid_search %>% h2o.auc(train = T, valid = T, xval = T)\n\n#>     train     valid      xval \n#> 0.9064394 0.9012377 0.8966053\n\n\nNo overfitting is observed since the AUC value for training, validation and cross-validation are all similar.\n\np_dl_model_grid_search <- dl_model_grid_search %>% h2o.performance(newdata = as.h2o(test_tbl))\n\np_dl_model_grid_search\n\n\n\n#> H2OBinomialMetrics: deeplearning\n#> \n#> MSE:  0.07524832\n#> RMSE:  0.2743143\n#> LogLoss:  0.2631152\n#> Mean Per-Class Error:  0.2072473\n#> AUC:  0.8954788\n#> AUCPR:  0.6113704\n#> Gini:  0.7909576\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     3132 214 0.063957  =214/3346\n#> Yes     163 302 0.350538   =163/465\n#> Totals 3295 516 0.098924  =377/3811\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.449638    0.615698 141\n#> 2                       max f2  0.342839    0.681644 188\n#> 3                 max f0point5  0.629235    0.631579  72\n#> 4                 max accuracy  0.629235    0.909473  72\n#> 5                max precision  0.998544    1.000000   0\n#> 6                   max recall  0.000051    1.000000 399\n#> 7              max specificity  0.998544    1.000000   0\n#> 8             max absolute_mcc  0.449638    0.560103 141\n#> 9   max min_per_class_accuracy  0.273284    0.821505 223\n#> 10 max mean_per_class_accuracy  0.265519    0.824108 227\n#> 11                     max tns  0.998544 3346.000000   0\n#> 12                     max fns  0.998544  462.000000   0\n#> 13                     max fps  0.000051 3346.000000 399\n#> 14                     max tps  0.000051  465.000000 399\n#> 15                     max tnr  0.998544    1.000000   0\n#> 16                     max fnr  0.998544    0.993548   0\n#> 17                     max fpr  0.000051    1.000000 399\n#> 18                     max tpr  0.000051    1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n\n\nIt is seen that by using grid search it was possible find a model with improved performance metrics compared to the base model found in the previous section.\n\n\nModel\nAUC\nLogLoss\n\n\n\ndl_model_automl\n0.775\n0.321\n\n\ndl_model_grid_search\n0.895\n0.263"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#visualize-the-trade-off-between-the-precision-and-the-recall-and-the-optimal-threshold",
    "href": "content/01_journal/05_performance_measures.html#visualize-the-trade-off-between-the-precision-and-the-recall-and-the-optimal-threshold",
    "title": "Performance Measures",
    "section": "\n3.8 Visualize the trade-off between the precision and the recall and the optimal threshold",
    "text": "3.8 Visualize the trade-off between the precision and the recall and the optimal threshold\nConvert the performance object of the model into a series of different metrics which vary by threshold and store it as p_dl_model_grid_search_tbl:\n\np_dl_model_grid_search_tbl <- p_dl_model_grid_search %>% \n  h2o.metric() %>%\n  as_tibble() %>%\n  mutate(auc = h2o.auc(p_dl_model_grid_search))\n\nVisualize precision and recall by selecting corresponding columns:\n\np_dl_model_grid_search_tbl %>% select(c(threshold, precision, recall)) %>% \n  pivot_longer(cols = c(precision, recall), names_to = \"key\", values_to = \"values\") %>%\n  \n  ggplot(aes(x = threshold, y = values, color = key)) +\n  geom_line(size = 1) +\n  scale_color_manual(values = c(\"#2DC6D6\", \"#FF8014\")) +\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(p_dl_model_grid_search, \"f1\"), \n             color = 'red', size = 1) +\n  labs(title = \"Precision vs Recall\", subtitle = \"dl_model_grid_search\", y = \"Value\", x = \"Threshold\", col = \"\") +\n  theme(\n    legend.position = \"bottom\",\n    legend.background = element_rect(fill = NA, color = \"white\"),\n    legend.key = element_blank(),\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\", color = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )\n\n\n\n\n\n\n\n\n\nFrom the figure, values of precision and recall can be seen as the threshold value increases. The vertical red line indicates the optimal threshold value which maximizes the F1."
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#roc-plot",
    "href": "content/01_journal/05_performance_measures.html#roc-plot",
    "title": "Performance Measures",
    "section": "\n3.9 ROC Plot",
    "text": "3.9 ROC Plot\n\nroc_plot <- ggplot() + \n  geom_line(data = p_dl_model_automl_tbl, \n            aes(x = fpr, y = tpr, color = \"dl_model_automl\"), \n            size = 1) +\n  geom_line(data = p_dl_model_grid_search_tbl, \n            aes(x = fpr, y = tpr, color = \"dl_model_grid_search\"), \n            size = 1) +\n  geom_abline(color = \"red\", \n              linetype = \"dotted\", \n              size = 1) +\n  scale_color_manual(name = \"\", \n                     values = c(\"dl_model_automl\" = \"#2DC6D6\", \"dl_model_grid_search\" = \"#FF8014\")) +\n  labs(title = \"ROC Plot\", \n       subtitle = \"Performance Comparison of dl_model_automl and dl_model_grid_search\", \n       x = \"False Positive Rate (FPR)\", \n       y = \"True Positive Rate (TPR)\") +\n  theme(\n    legend.position = \"bottom\",\n    legend.background = element_rect(fill = NA, color = \"white\"),\n    legend.key = element_blank(),\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\", color = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )\n\nroc_plot\n\n\n\n\n\n\n\nIt is also seen from the ROC plot that the model found with grid search (dl_model_grid_search) has better performance since it has a larger area under its curve compared to the model that has been found automatically (dl_model_automl)."
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#precision-vs-recall-plot",
    "href": "content/01_journal/05_performance_measures.html#precision-vs-recall-plot",
    "title": "Performance Measures",
    "section": "\n3.10 Precision vs Recall Plot",
    "text": "3.10 Precision vs Recall Plot\n\npr_plot <- ggplot() +\n  geom_line(data = p_dl_model_automl_tbl, \n            aes(x = recall, y = precision, color = \"dl_model_automl\"), \n            size = 1) +\n  geom_line(data = p_dl_model_grid_search_tbl, \n            aes(x = recall, y = precision, color = \"dl_model_grid_search\"), \n            size = 1) +\n  scale_color_manual(name = \"\", \n                     values = c(\"dl_model_automl\" = \"#2DC6D6\", \"dl_model_grid_search\" = \"#FF8014\")) +\n  labs(title = \"Precision vs Recall Plot\", \n       subtitle = \"Performance Comparison of dl_model_automl and dl_model_grid_search\", \n       x = \"Recall\", \n       y = \"Precision\") +\n  theme(\n    legend.position = \"bottom\",\n    legend.background = element_rect(fill = NA, color = \"white\"),\n    legend.key = element_blank(),\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\", color = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )\n\npr_plot\n\n\n\n\n\n\n\nA similar observation can also be made for the precision-recall curve. It is seen that dl_model_grid_search performs better compared to dl_model_automl since its curve is closer to the upper right corner of the plot (which means the model can maintain higher precision while recall increases)."
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#gain-plot",
    "href": "content/01_journal/05_performance_measures.html#gain-plot",
    "title": "Performance Measures",
    "section": "\n3.11 Gain Plot",
    "text": "3.11 Gain Plot\n\ngain_lift_automl_tbl <- p_dl_model_automl %>%\n  h2o.gainsLift() %>%\n  as_tibble()\n\ngain_automl_transformed_tbl <- gain_lift_automl_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"lift\")) %>%\n  mutate(baseline = cumulative_data_fraction) %>%\n  rename(gain     = cumulative_capture_rate) %>%\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_lift_grid_tbl <- p_dl_model_grid_search %>%\n  h2o.gainsLift() %>%\n  as_tibble()\n\ngain_grid_transformed_tbl <- gain_lift_grid_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"lift\")) %>%\n  mutate(baseline = cumulative_data_fraction) %>%\n  rename(gain     = cumulative_capture_rate) %>%\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\n\ngain_plot <- ggplot() +\n  geom_line(data = gain_automl_transformed_tbl %>% filter(str_detect(key, \"gain\")), \n            aes(x = cumulative_data_fraction, y = value, color = \"dl_model_automl\"),\n            size = 1) +\n  geom_line(data = gain_grid_transformed_tbl %>% filter(str_detect(key, \"gain\")), \n            aes(x = cumulative_data_fraction, y = value, color = \"dl_model_grid_search\"),\n            size = 1) +\n  geom_abline(color = \"red\", \n            linetype = \"dotted\", \n            size = 1) +\n  scale_color_manual(name = \"\", \n                     values = c(\"dl_model_automl\" = \"#2DC6D6\", \n                                \"dl_model_grid_search\" = \"#FF8014\")) +\n  labs(title = \"Gain Chart\", x = \"Cumulative Data Fraction\", y = \"Gain\") +\n  theme(\n    legend.position = \"bottom\",\n    legend.background = element_rect(fill = NA, color = \"white\"),\n    legend.key = element_blank(),\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\", color = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )\n\ngain_plot\n\n\n\n\n\n\n\nFrom the figure, it can be seen that with dl_model_grid_search, the ability to target backorders from a given size of data has increased significantly, especially at the lower end of the x-axis (where it is important)."
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#lift-plot",
    "href": "content/01_journal/05_performance_measures.html#lift-plot",
    "title": "Performance Measures",
    "section": "\n3.12 Lift Plot",
    "text": "3.12 Lift Plot\n\nlift_automl_transformed_tbl <- gain_lift_automl_tbl %>%\n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"capture\")) %>%\n  mutate(baseline = 1) %>%\n  rename(lift = cumulative_lift) %>%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_grid_transformed_tbl <- gain_lift_grid_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"capture\")) %>%\n  mutate(baseline = 1) %>%\n  rename(lift = cumulative_lift) %>%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\n\nlift_plot <- ggplot() +\n  geom_line(data = lift_automl_transformed_tbl %>% filter(str_detect(key, \"lift\")), \n            aes(x = cumulative_data_fraction, y = value, color = \"dl_model_automl\"),\n            size = 1) +\n  geom_line(data = lift_grid_transformed_tbl %>% filter(str_detect(key, \"lift\")), \n            aes(x = cumulative_data_fraction, y = value, color = \"dl_model_grid_search\"),\n            size = 1) +\n  geom_hline(yintercept = 1,\n             color = \"red\", \n            linetype = \"dotted\", \n            size = 1) +\n  scale_color_manual(name = \"\", \n                     values = c(\"dl_model_automl\" = \"#2DC6D6\", \n                                \"dl_model_grid_search\" = \"#FF8014\")) +\n  labs(title = \"Lift Chart\", x = \"Cumulative Data Fraction\", y = \"Lift\") +\n  theme(\n    legend.position = \"bottom\",\n    legend.background = element_rect(fill = NA, color = \"white\"),\n    legend.key = element_blank(),\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\", color = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )\n\nlift_plot\n\n\n\n\n\n\n\nSimilarly, it is seen from the figure that dl_model_grid_search is better at targeting backorders for the same size of data when compared with dl_model_automl."
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#dashboard-with-cowplot",
    "href": "content/01_journal/05_performance_measures.html#dashboard-with-cowplot",
    "title": "Performance Measures",
    "section": "\n3.13 Dashboard with cowplot",
    "text": "3.13 Dashboard with cowplot\n\np_legend <- get_legend(roc_plot)\n\nroc_plot <- roc_plot + theme(legend.position = \"none\") + labs(subtitle = element_blank())\npr_plot <- pr_plot + theme(legend.position = \"none\") + labs(subtitle = element_blank())\ngain_plot <- gain_plot + theme(legend.position = \"none\")\nlift_plot <- lift_plot + theme(legend.position = \"none\")\n\np <- plot_grid(roc_plot, pr_plot, gain_plot, lift_plot, ncol = 2)\n\np_title <- ggdraw() + \n  draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", color = \"white\")\n  \np_subtitle <- ggdraw() + draw_label(glue(\"\"), size = 10, color = \"white\")\n  \ncombined_plot <- plot_grid(p_title, \n                           p_subtitle, \n                           p, \n                           p_legend, \n                           ncol = 1, \n                           rel_heights = c(0.05, 0.05, 1, 0.05 * 4)) +\n  theme(\n    legend.position = \"bottom\",\n    legend.background = element_rect(fill = NA, color = \"white\"),\n    panel.background = element_blank(),\n    panel.border = element_rect(color = \"#222222\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\", color = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )\n\ncombined_plot"
  },
  {
    "objectID": "content/01_journal/06_lime.html",
    "href": "content/01_journal/06_lime.html",
    "title": "Explaining Black-Box Models with LIME",
    "section": "",
    "text": "In this challenge, we take the models we’ve developed and explain their localized prediction results to understand the reasons behind their predictions which will help with the assessment of trust to a model."
  },
  {
    "objectID": "content/01_journal/06_lime.html#import-libraries",
    "href": "content/01_journal/06_lime.html#import-libraries",
    "title": "Explaining Black-Box Models with LIME",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(h2o)\nlibrary(recipes)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)"
  },
  {
    "objectID": "content/01_journal/06_lime.html#load-the-training-test-dataset",
    "href": "content/01_journal/06_lime.html#load-the-training-test-dataset",
    "title": "Explaining Black-Box Models with LIME",
    "section": "\n3.2 Load the training & test dataset",
    "text": "3.2 Load the training & test dataset\n\nemployee_attrition_tbl <- read_csv(\n  \"data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\ndefinitions_raw_tbl <- read_excel(\"data/data_definitions.xlsx\",\n                                  sheet = 1,\n                                  col_names = FALSE)\n\n\nemployee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, \n                                                            definitions_raw_tbl)\n\nemployee_attrition_readable_tbl %>% glimpse()\n\n\n\n#> Rows: 1,470\n#> Columns: 35\n#> $ Age                      <dbl> 41, 49, 37, 33, 27, 32, 59, 30, 38, 36, 35, 2…\n#> $ Attrition                <fct> Yes, No, Yes, No, No, No, No, No, No, No, No,…\n#> $ BusinessTravel           <fct> Travel_Rarely, Travel_Frequently, Travel_Rare…\n#> $ DailyRate                <dbl> 1102, 279, 1373, 1392, 591, 1005, 1324, 1358,…\n#> $ Department               <fct> Sales, Research & Development, Research & Dev…\n#> $ DistanceFromHome         <dbl> 1, 8, 2, 3, 2, 2, 3, 24, 23, 27, 16, 15, 26, …\n#> $ Education                <fct> College, Below College, College, Master, Belo…\n#> $ EducationField           <fct> Life Sciences, Life Sciences, Other, Life Sci…\n#> $ EmployeeCount            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n#> $ EmployeeNumber           <dbl> 1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16,…\n#> $ EnvironmentSatisfaction  <fct> Medium, High, Very High, Very High, Low, Very…\n#> $ Gender                   <fct> Female, Male, Male, Female, Male, Male, Femal…\n#> $ HourlyRate               <dbl> 94, 61, 92, 56, 40, 79, 81, 67, 44, 94, 84, 4…\n#> $ JobInvolvement           <fct> High, Medium, Medium, High, High, High, Very …\n#> $ JobLevel                 <dbl> 2, 2, 1, 1, 1, 1, 1, 1, 3, 2, 1, 2, 1, 1, 1, …\n#> $ JobRole                  <fct> Sales Executive, Research Scientist, Laborato…\n#> $ JobSatisfaction          <fct> Very High, Medium, High, High, Medium, Very H…\n#> $ MaritalStatus            <fct> Single, Married, Single, Married, Married, Si…\n#> $ MonthlyIncome            <dbl> 5993, 5130, 2090, 2909, 3468, 3068, 2670, 269…\n#> $ MonthlyRate              <dbl> 19479, 24907, 2396, 23159, 16632, 11864, 9964…\n#> $ NumCompaniesWorked       <dbl> 8, 1, 6, 1, 9, 0, 4, 1, 0, 6, 0, 0, 1, 0, 5, …\n#> $ Over18                   <fct> Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, …\n#> $ OverTime                 <fct> Yes, No, Yes, Yes, No, No, Yes, No, No, No, N…\n#> $ PercentSalaryHike        <dbl> 11, 23, 15, 11, 12, 13, 20, 22, 21, 13, 13, 1…\n#> $ PerformanceRating        <fct> Excellent, Outstanding, Excellent, Excellent,…\n#> $ RelationshipSatisfaction <fct> Low, Very High, Medium, High, Very High, High…\n#> $ StandardHours            <dbl> 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 8…\n#> $ StockOptionLevel         <dbl> 0, 1, 0, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1, 1, 0, …\n#> $ TotalWorkingYears        <dbl> 8, 10, 7, 8, 6, 8, 12, 1, 10, 17, 6, 10, 5, 3…\n#> $ TrainingTimesLastYear    <dbl> 0, 3, 3, 3, 3, 2, 3, 2, 2, 3, 5, 3, 1, 2, 4, …\n#> $ WorkLifeBalance          <fct> Bad, Better, Better, Better, Better, Good, Go…\n#> $ YearsAtCompany           <dbl> 6, 10, 0, 8, 2, 7, 1, 1, 9, 7, 5, 9, 5, 2, 4,…\n#> $ YearsInCurrentRole       <dbl> 4, 7, 0, 7, 2, 7, 0, 0, 7, 7, 4, 5, 2, 2, 2, …\n#> $ YearsSinceLastPromotion  <dbl> 0, 1, 0, 3, 2, 3, 0, 0, 1, 7, 0, 0, 4, 1, 0, …\n#> $ YearsWithCurrManager     <dbl> 5, 7, 0, 0, 2, 6, 0, 0, 8, 7, 3, 8, 3, 2, 3, …\n\n\n\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\ntrain_readable_tbl <- rsample::training(split_obj)\ntest_readable_tbl  <- rsample::testing(split_obj)\n\n\nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n  step_zv(all_predictors()) %>%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %>% \n  prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\ntrain_tbl %>% glimpse()\n\n#> Rows: 1,249\n#> Columns: 32\n#> $ Age                      <dbl> 38, 52, 42, 18, 24, 42, 56, 31, 32, 35, 47, 2…\n#> $ BusinessTravel           <fct> Travel_Frequently, Travel_Rarely, Travel_Rare…\n#> $ DailyRate                <dbl> 1490, 1490, 1265, 230, 1206, 1147, 667, 1276,…\n#> $ Department               <fct> Research & Development, Research & Developmen…\n#> $ DistanceFromHome         <dbl> 2, 4, 3, 3, 17, 10, 1, 2, 2, 18, 2, 2, 2, 3, …\n#> $ Education                <fct> College, College, Bachelor, Bachelor, Below C…\n#> $ EducationField           <fct> Life Sciences, Life Sciences, Life Sciences, …\n#> $ EmployeeNumber           <dbl> 556, 546, 894, 405, 1009, 1408, 2026, 1974, 1…\n#> $ EnvironmentSatisfaction  <fct> Very High, Very High, High, High, Very High, …\n#> $ Gender                   <fct> Male, Female, Female, Male, Female, Female, M…\n#> $ HourlyRate               <dbl> 42, 30, 95, 54, 41, 31, 57, 59, 45, 67, 47, 4…\n#> $ JobInvolvement           <fct> High, High, Very High, High, Medium, High, Hi…\n#> $ JobLevel                 <fct> 1, 4, 2, 1, 2, 4, 2, 1, 2, 2, 4, 1, 2, 2, 1, …\n#> $ JobRole                  <fct> Laboratory Technician, Manager, Laboratory Te…\n#> $ JobSatisfaction          <fct> Very High, Very High, Very High, High, High, …\n#> $ MaritalStatus            <fct> Married, Married, Married, Single, Divorced, …\n#> $ MonthlyIncome            <dbl> 1702, 16555, 5231, 1420, 4377, 16799, 6306, 1…\n#> $ MonthlyRate              <dbl> 12106, 10310, 23726, 25233, 24117, 16616, 262…\n#> $ NumCompaniesWorked       <dbl> 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 6, 1, 5, 0, 1, …\n#> $ OverTime                 <fct> Yes, No, Yes, No, No, No, No, Yes, No, Yes, N…\n#> $ PercentSalaryHike        <dbl> 23, 13, 13, 13, 15, 14, 21, 11, 13, 18, 14, 1…\n#> $ PerformanceRating        <fct> Outstanding, Excellent, Excellent, Excellent,…\n#> $ RelationshipSatisfaction <fct> High, Very High, Medium, High, Medium, High, …\n#> $ StockOptionLevel         <fct> 1, 0, 1, 0, 2, 1, 1, 3, 2, 1, 3, 1, 1, 1, 0, …\n#> $ TotalWorkingYears        <dbl> 1, 31, 17, 0, 5, 21, 13, 1, 10, 5, 29, 6, 17,…\n#> $ TrainingTimesLastYear    <dbl> 3, 2, 1, 2, 6, 5, 2, 4, 4, 0, 2, 3, 2, 3, 2, …\n#> $ WorkLifeBalance          <fct> Better, Bad, Good, Better, Better, Better, Go…\n#> $ YearsAtCompany           <dbl> 1, 5, 5, 0, 4, 20, 13, 1, 9, 4, 3, 5, 1, 3, 3…\n#> $ YearsInCurrentRole       <dbl> 0, 2, 3, 0, 2, 7, 12, 0, 5, 2, 2, 3, 0, 2, 2,…\n#> $ YearsSinceLastPromotion  <dbl> 0, 1, 1, 0, 3, 0, 1, 0, 1, 3, 1, 1, 0, 0, 1, …\n#> $ YearsWithCurrManager     <dbl> 0, 4, 3, 0, 2, 9, 9, 0, 6, 2, 2, 2, 0, 2, 2, …\n#> $ Attrition                <fct> No, No, No, Yes, No, No, No, No, No, Yes, No,…"
  },
  {
    "objectID": "content/01_journal/06_lime.html#specify-the-response-and-predictor-variables",
    "href": "content/01_journal/06_lime.html#specify-the-response-and-predictor-variables",
    "title": "Explaining Black-Box Models with LIME",
    "section": "\n3.3 Specify the response and predictor variables",
    "text": "3.3 Specify the response and predictor variables\n\nh2o.init()\n\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.80), seed = 767)\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\ny <- \"Attrition\"\nx <- setdiff(names(train_h2o), y)"
  },
  {
    "objectID": "content/01_journal/06_lime.html#run-automl-specifying-the-stopping-criterion",
    "href": "content/01_journal/06_lime.html#run-automl-specifying-the-stopping-criterion",
    "title": "Explaining Black-Box Models with LIME",
    "section": "\n3.4 Run AutoML specifying the stopping criterion",
    "text": "3.4 Run AutoML specifying the stopping criterion\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)"
  },
  {
    "objectID": "content/01_journal/06_lime.html#view-the-leaderboard",
    "href": "content/01_journal/06_lime.html#view-the-leaderboard",
    "title": "Explaining Black-Box Models with LIME",
    "section": "\n3.5 View the leaderboard",
    "text": "3.5 View the leaderboard\n\nautoml_models_h2o@leaderboard\n\n#>                                                  model_id       auc   logloss\n#> 1 StackedEnsemble_BestOfFamily_2_AutoML_1_20230604_174346 0.8429635 0.3584387\n#> 2 StackedEnsemble_BestOfFamily_3_AutoML_1_20230604_174346 0.8429635 0.3583834\n#> 3                          GLM_1_AutoML_1_20230604_174346 0.8382126 0.3667822\n#> 4    StackedEnsemble_AllModels_1_AutoML_1_20230604_174346 0.8368002 0.3625751\n#> 5    StackedEnsemble_AllModels_2_AutoML_1_20230604_174346 0.8365434 0.3634151\n#> 6 StackedEnsemble_BestOfFamily_1_AutoML_1_20230604_174346 0.8341037 0.3669197\n#>       aucpr mean_per_class_error      rmse       mse\n#> 1 0.7041487            0.2526965 0.3262724 0.1064537\n#> 2 0.7041487            0.2526965 0.3261532 0.1063759\n#> 3 0.6949432            0.2440293 0.3285656 0.1079554\n#> 4 0.6984395            0.2470467 0.3274094 0.1071969\n#> 5 0.6976481            0.2470467 0.3265304 0.1066221\n#> 6 0.6952641            0.2498716 0.3282241 0.1077311\n#> \n#> [15 rows x 7 columns]"
  },
  {
    "objectID": "content/01_journal/06_lime.html#predicting-using-leader-model",
    "href": "content/01_journal/06_lime.html#predicting-using-leader-model",
    "title": "Explaining Black-Box Models with LIME",
    "section": "\n3.6 Predicting using Leader Model",
    "text": "3.6 Predicting using Leader Model\n\nleader_model <- automl_models_h2o@leaderboard %>% \n  extract_h2o_model_name_by_position(1) %>% \n  h2o.getModel()\n\n#> StackedEnsemble_BestOfFamily_2_AutoML_1_20230604_174346\n\n\n\npredictions_tbl <- leader_model %>% \n  h2o.predict(newdata = as.h2o(test_tbl)) %>%\n  as_tibble() %>%\n  bind_cols(test_tbl %>% select(Attrition, EmployeeNumber)\n  )\n\npredictions_tbl %>% glimpse()\n\n\n\n#> Rows: 221\n#> Columns: 5\n#> $ predict        <fct> Yes, No, No, No, No, No, No, Yes, Yes, No, No, No, No, …\n#> $ No             <dbl> 0.5075783, 0.8228293, 0.8627508, 0.9251066, 0.9509719, …\n#> $ Yes            <dbl> 0.492421742, 0.177170716, 0.137249238, 0.074893450, 0.0…\n#> $ Attrition      <fct> No, No, No, Yes, No, Yes, No, Yes, Yes, No, No, No, No,…\n#> $ EmployeeNumber <dbl> 10, 16, 30, 31, 40, 42, 46, 55, 64, 77, 80, 83, 85, 96,…"
  },
  {
    "objectID": "content/01_journal/06_lime.html#create-explainer",
    "href": "content/01_journal/06_lime.html#create-explainer",
    "title": "Explaining Black-Box Models with LIME",
    "section": "\n3.7 Create Explainer",
    "text": "3.7 Create Explainer\n\nexplainer <- train_tbl %>%\n  select(-Attrition) %>%\n  lime(\n    model           = leader_model,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )"
  },
  {
    "objectID": "content/01_journal/06_lime.html#single-explanation",
    "href": "content/01_journal/06_lime.html#single-explanation",
    "title": "Explaining Black-Box Models with LIME",
    "section": "\n3.8 Single Explanation",
    "text": "3.8 Single Explanation\n\nexplanation <- test_tbl %>%\n  slice(2) %>%\n  select(-Attrition) %>%\n  lime::explain(explainer = explainer, \n                n_labels   = 1, \n                n_features = 8, \n                n_permutations = 5000, \n                kernel_width   = 1)\n\nexplanation %>% glimpse()\n\n\n\n#> Rows: 8\n#> Columns: 13\n#> $ model_type       <chr> \"classification\", \"classification\", \"classification\",…\n#> $ case             <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"\n#> $ label            <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"\n#> $ label_prob       <dbl> 0.8228293, 0.8228293, 0.8228293, 0.8228293, 0.8228293…\n#> $ model_r2         <dbl> 0.3568517, 0.3568517, 0.3568517, 0.3568517, 0.3568517…\n#> $ model_intercept  <dbl> 0.6607001, 0.6607001, 0.6607001, 0.6607001, 0.6607001…\n#> $ model_prediction <dbl> 0.8136829, 0.8136829, 0.8136829, 0.8136829, 0.8136829…\n#> $ feature          <chr> \"OverTime\", \"TotalWorkingYears\", \"EnvironmentSatisfac…\n#> $ feature_value    <dbl> 1, 5, 1, 2, 1, 1, 2, 7\n#> $ feature_weight   <dbl> 0.17947515, -0.10045711, -0.10127646, 0.06347634, -0.…\n#> $ feature_desc     <chr> \"OverTime = No\", \"TotalWorkingYears <= 6\", \"Environme…\n#> $ data             <list> [31, Travel_Rarely, 670, Research & Development, 26, …\n#> $ prediction       <list> [0.8228293, 0.1771707], [0.8228293, 0.1771707], [0.82…\n\n\n\ncustom_plot_features <- function(expl) {\n  \n  case <- expl$case[1]\n  lab <- expl$label[1]\n  prob <- expl$label_prob[1] %>% round(2)\n  expl_fit <- expl$model_r2[1] %>% round(2)\n  \n  text <- paste(\" Case: \", case, \"\\n\", \"Label: \", lab, \"\\n\", \"Probability: \", prob, \"\\n\", \"Explanation Fit: \", expl_fit)\n  \n  g <- expl %>% \n    arrange(desc(abs(feature_weight))) %>%\n    mutate(feature_type = case_when(\n      (feature_weight) >= 0 ~ \"Supports\",\n      TRUE ~ \"Contradicts\") %>% as.factor()) %>%\n    ggplot(aes(x = feature_desc, y = feature_weight, group = feature_weight)) +\n    geom_col(aes(reorder(feature_desc, abs(feature_weight)), fill = feature_type)) + \n    scale_fill_manual(\"\", values = c(\"Supports\" = \"#FF8014\", \"Contradicts\" = \"#2DC6D6\")) + \n    coord_flip() +\n    labs(x = \"Feature\", y = \"Weight\", subtitle = text) +\n    theme(\n      legend.position = \"bottom\", \n      legend.background = element_rect(fill = NA, color = \"white\"), \n      panel.background = element_blank(), \n      panel.border = element_rect(color = \"white\", fill = NA), \n      plot.background = element_rect(fill = \"#222222\"), \n      line = element_line(color = \"white\"), \n      text = element_text(color = \"white\"), \n      axis.ticks = element_line(color = \"white\"), \n      axis.text = element_text(color = \"white\"),\n      plot.subtitle = element_text(size = 7)\n  )\n    \n  return(g)\n}\n\n\ncustom_plot_features(explanation)"
  },
  {
    "objectID": "content/01_journal/06_lime.html#multiple-explanations",
    "href": "content/01_journal/06_lime.html#multiple-explanations",
    "title": "Explaining Black-Box Models with LIME",
    "section": "\n3.9 Multiple Explanations",
    "text": "3.9 Multiple Explanations\n\nexplanation_multiple <- test_tbl %>%\n  slice(1:20) %>%\n  select(-Attrition) %>%\n  lime::explain(\n    explainer = explainer,\n    n_labels   = 1,\n    n_features = 8,\n    n_permutations = 5000,\n    kernel_width   = 0.5\n  )\n\nexplanation_multiple %>% glimpse()\n\n\n\n#> Rows: 160\n#> Columns: 13\n#> $ model_type       <chr> \"classification\", \"classification\", \"classification\",…\n#> $ case             <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\", \"2\"…\n#> $ label            <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",…\n#> $ label_prob       <dbl> 0.5075783, 0.5075783, 0.5075783, 0.5075783, 0.5075783…\n#> $ model_r2         <dbl> 0.2756794, 0.2756794, 0.2756794, 0.2756794, 0.2756794…\n#> $ model_intercept  <dbl> 0.8596368, 0.8596368, 0.8596368, 0.8596368, 0.8596368…\n#> $ model_prediction <dbl> 0.5869353, 0.5869353, 0.5869353, 0.5869353, 0.5869353…\n#> $ feature          <chr> \"OverTime\", \"RelationshipSatisfaction\", \"JobLevel\", \"…\n#> $ feature_value    <dbl> 2, 1, 1, 2, 1, 0, 1, 2, 1, 5, 1, 1, 1, 7, 2, 2, 1, 0,…\n#> $ feature_weight   <dbl> -0.18643306, -0.08441920, -0.06808375, 0.05835649, 0.…\n#> $ feature_desc     <chr> \"OverTime = Yes\", \"RelationshipSatisfaction = Low\", \"…\n#> $ data             <list> [59, Travel_Rarely, 1324, Research & Development, 3,…\n#> $ prediction       <list> [0.5075783, 0.4924217], [0.5075783, 0.4924217], [0.5…\n\n\n\ncustom_plot_explanations <- function(expl) {\n  \n  expl$case <- as_factor(expl$case)\n  \n  g <- expl %>%\n    ggplot(aes(x = case, y = feature_desc, fill = feature_weight)) +\n    geom_tile() + \n    facet_wrap(~ label) +\n    scale_fill_gradient2(\"Feature Weight\", \n                         low = \"#2DC6D6\", \n                         high = \"#FF8014\", \n                         mid = \"white\") + \n    labs(x = \"Case\", y = \"Feature\") +\n    theme(\n      legend.background = element_rect(fill = NA, color = \"white\"), \n      panel.background = element_blank(),\n      panel.border = element_rect(color = \"white\", fill = NA),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      plot.background = element_rect(fill = \"#222222\"), \n      line = element_line(color = \"white\"), \n      text = element_text(color = \"white\"), \n      axis.ticks = element_line(color = \"white\"), \n      axis.text = element_text(color = \"white\", size = 5)\n  )\n  \n  return(g)\n}\n\n\ncustom_plot_explanations(explanation_multiple)"
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html",
    "href": "content/01_journal/data/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/tidyverse.html",
    "href": "content/01_journal/tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/tidyverse.html#header-2",
    "href": "content/01_journal/tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#build-the-model",
    "href": "content/01_journal/02_regression_ii.html#build-the-model",
    "title": "Regression (II)",
    "section": "\n3.4 Build the model",
    "text": "3.4 Build the model\nCreate a parsnip specification for linear regression:\n\nlinear_model <- linear_reg(\"regression\") %>% set_engine(\"lm\")"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#run-automl",
    "href": "content/01_journal/05_performance_measures.html#run-automl",
    "title": "Performance Measures",
    "section": "\n3.4 Run AutoML",
    "text": "3.4 Run AutoML\nSet 600 seconds for max_runtime_secs and 15 for max_models to limit the computation time:\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 600,\n  max_models = 15,\n  nfolds            = 5,\n  include_algos = c(\"DeepLearning\", \"GBM\", \"XGBoost\", \"GLM\", \"DRF\")\n)"
  }
]