[
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html",
    "href": "code_drafts/data/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "code_drafts/data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "code_drafts/data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html",
    "href": "content/01_journal/01_machine_learning_fundamentals.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments."
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#import-libraries",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#import-libraries",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\nlibrary(ggrepel)"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#read-data",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#read-data",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.2 Read Data",
    "text": "3.2 Read Data\n\nsp_500_prices_tbl <- read_rds(\"~/GitHub/ss23-bdml-gcturemen/code_drafts/data/sp_500_prices_tbl.rds\")\nsp_500_index_tbl <- read_rds(\"~/GitHub/ss23-bdml-gcturemen/code_drafts/data/sp_500_index_tbl.rds\")"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.3 Convert stock prices to a standardized format (daily returns)",
    "text": "3.3 Convert stock prices to a standardized format (daily returns)\n\nsp_500_prices_tbl <- sp_500_prices_tbl %>% \n  filter(date >= '2018-01-01') %>%\n  group_by(symbol) %>%\n  mutate(lag = lag(adjusted)) %>%\n  na.omit() %>%\n  mutate(diff = adjusted - lag) %>%\n  mutate(pct_return = diff / lag)\n\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% \n  select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl %>% \n  glimpse()\n\n#> Rows: 141,340\n#> Columns: 3\n#> Groups: symbol [502]\n#> $ symbol     <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MS…\n#> $ date       <date> 2018-01-03, 2018-01-04, 2018-01-05, 2018-01-08, 2018-01-09…\n#> $ pct_return <dbl> 0.0046539123, 0.0088014214, 0.0123981290, 0.0010204489, -0.…"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#convert-to-user-item-format",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#convert-to-user-item-format",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.4 Convert to User-Item Format",
    "text": "3.4 Convert to User-Item Format\n\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>% \n  pivot_wider(names_from = date, values_from = pct_return, values_fill = 0) %>%\n  ungroup()\n\nstock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#perform-k-means-clustering",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#perform-k-means-clustering",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.5 Perform K-Means Clustering",
    "text": "3.5 Perform K-Means Clustering\n\nkmeans_obj <- stock_date_matrix_tbl %>%\n  select(-symbol) %>%\n  kmeans(centers = 4, nstart = 20)\n\nkmeans_obj %>% \n  glance()"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#find-the-optimal-value-of-k",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#find-the-optimal-value-of-k",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.6 Find the optimal value of K",
    "text": "3.6 Find the optimal value of K\nCustom function kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApplying kmeans_mapper() and glance() functions iteratively:\n\nk_means_mapped_tbl <- tibble(centers = 1:30) %>%\n  mutate(k_means = centers %>% map(kmeans_mapper)) %>%\n  mutate(glance  = k_means %>% map(glance))\n\nVisualizing the result as a Scree Plot:\n\nk_means_mapped_tbl %>%\n  unnest(glance) %>%\n  select(centers, tot.withinss) %>%\n  \n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"#2DC6D6\", size = 2) +\n  geom_line(color = \"#2DC6D6\", linewidth = 1) +\n  ggrepel::geom_label_repel(aes(label = centers), color = \"#FF8014\", fill = \"#282A36\", size = 3, label.padding = 0.10, nudge_x = 0.75, nudge_y = 1) + \n  \n  labs(title = \"Scree Plot\",\n       subtitle = \"Total within-cluster sum of squares for various number of centers\",\n       caption = \"Conclusion: Based on the Scree Plot, a value between 5-10 can be chosen for the number of centers.\") +\n  theme(\n    panel.background = element_rect(fill = \"#222222\"),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\"),\n    #panel.grid = element_line(color = \"white\"),\n    #legend.background = element_rect(fill='transparent'),\n    #legend.box.background = element_rect(fill='transparent')\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#apply-umap",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#apply-umap",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.7 Apply UMAP",
    "text": "3.7 Apply UMAP\nApplying umap() function to the stock_date_matrix_tbl:\n\numap_results <- stock_date_matrix_tbl %>% \n  select(-symbol) %>% \n  umap()\n\nCombining the layout from the umap_results with the symbol column from the stock_date_matrix_tbl:\n\numap_results_tbl <- umap_results$layout %>%\n  as_tibble(.name_repair = \"unique\") %>%\n  set_names(c(\"x\", \"y\")) %>%\n  bind_cols(stock_date_matrix_tbl %>% select(symbol))\n\nVisualizing the umap_results_tbl:\n\numap_results_tbl %>%\n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.5, size = 0.5, color = '#2DC6D6') + \n  geom_label_repel(aes(label = symbol), size = 1, max.overlaps = 20, label.padding = 0.10, color = '#FF8014', seed = 777, nudge_x = 0.25, nudge_y = 0.05, fill = \"#282A36\") + \n  #theme_tq() + \n  labs(title = 'UMAP 2D Projection') +\n  theme(\n    panel.background = element_rect(fill = \"#222222\"),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )"
  },
  {
    "objectID": "content/01_journal/01_machine_learning_fundamentals.html#combine-k-means-and-umap",
    "href": "content/01_journal/01_machine_learning_fundamentals.html#combine-k-means-and-umap",
    "title": "Machine Learning Fundamentals",
    "section": "\n3.8 Combine K-Means and UMAP",
    "text": "3.8 Combine K-Means and UMAP\nPulling out the K-Means for 10 centers:\n\nk_means_obj <- k_means_mapped_tbl %>%\n  pull(k_means) %>%\n  pluck(10)\n\nCombining the clusters from k_means_obj with umap_results_tbl:\n\nk_means_10_clusters_tbl <- k_means_obj %>% \n  augment(stock_date_matrix_tbl) %>%\n  select(symbol, .cluster)\n\numap_kmeans_results_tbl <-  k_means_10_clusters_tbl %>%\n  left_join(umap_results_tbl, by = 'symbol') %>% \n  left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = 'symbol')\n\nVisualizing the K-Means and UMAP results:\n\numap_kmeans_results_tbl %>%\n  mutate(label_text = str_glue(\"Symbol: {symbol}\n                                 Cluster: {.cluster}\")) %>%\n  \n  ggplot(aes(x, y, color = .cluster)) +\n  \n  # Geometries\n  geom_point(alpha = 0.5, size = 0.5) +\n  geom_label_repel(aes(label = label_text), size = 1,max.overlaps = 20, fill = \"#282A36\", label.padding = 0.10, nudge_x = 0.25, nudge_y = 0.05) +\n  \n  # Formatting\n  scale_color_discrete() +\n  labs(title = \"Company Segmentation: 2D Projection\",\n       subtitle = \"UMAP 2D Projection with K-Means Cluster Assignment\") +\n  theme(\n    legend.position = \"none\",\n    #legend.key = element_rect(fill = umap_kmeans_results_tbl$.cluster),\n    panel.background = element_rect(fill = \"#222222\"),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    legend.background = element_rect(fill = \"#222222\"),\n    plot.background = element_rect(fill = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html",
    "href": "content/01_journal/02_regression_ii.html",
    "title": "Regression (II)",
    "section": "",
    "text": "Our goal is to figure out what gaps exist in the products of a bike manufacturer and come up with a pricing algorithm that will help us to determine a price, if we were to come up with products in that product category."
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#import-libraries",
    "href": "content/01_journal/02_regression_ii.html#import-libraries",
    "title": "Regression (II)",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(tidyverse)  \nlibrary(parsnip)  \nlibrary(recipes)  \nlibrary(rsample)\nlibrary(workflows)\nlibrary(yardstick)"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#read-data",
    "href": "content/01_journal/02_regression_ii.html#read-data",
    "title": "Regression (II)",
    "section": "\n3.2 Read Data",
    "text": "3.2 Read Data\n\nbike_orderlines_tbl <- readRDS(\n  \"~/GitHub/ss23-bdml-gcturemen/code_drafts/data/bike_orderlines.rds\")\n\nbike_features_tbl <- readRDS(\n  \"~/GitHub/ss23-bdml-gcturemen/code_drafts/data/bike_features_tbl.rds\")\n\nbike_orderlines_tbl %>% glimpse()\n\n#> Rows: 15,644\n#> Columns: 18\n#> $ order_id       <dbl> 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7…\n#> $ order_line     <dbl> 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1…\n#> $ order_date     <dttm> 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-0…\n#> $ model          <chr> \"Spectral CF 7 WMN\", \"Ultimate CF SLX Disc 8.0 ETAP\", \"…\n#> $ model_year     <dbl> 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2…\n#> $ category_1     <chr> \"Mountain\", \"Road\", \"Mountain\", \"Road\", \"Mountain\", \"Hy…\n#> $ category_2     <chr> \"Trail\", \"Race\", \"Trail\", \"Triathlon Bike\", \"Dirt Jump\"…\n#> $ category_3     <chr> \"Spectral\", \"Ultimate\", \"Neuron\", \"Speedmax\", \"Stitched…\n#> $ price          <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#> $ quantity       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1…\n#> $ total_price    <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#> $ frame_material <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"aluminium\", \"c…\n#> $ weight         <dbl> 13.80, 7.44, 14.06, 8.80, 11.50, 8.80, 8.20, 8.85, 14.4…\n#> $ url            <chr> \"https://www.canyon.com/en-de/mountain-bikes/trail-bike…\n#> $ bikeshop       <chr> \"AlexandeRad\", \"AlexandeRad\", \"WITT-RAD\", \"WITT-RAD\", \"…\n#> $ location       <chr> \"Hamburg, Hamburg\", \"Hamburg, Hamburg\", \"Bremen, Bremen…\n#> $ lat            <dbl> 53.57532, 53.57532, 53.07379, 53.07379, 48.78234, 48.78…\n#> $ lng            <dbl> 10.015340, 10.015340, 8.826754, 8.826754, 9.180819, 9.1…"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#data-exploration",
    "href": "content/01_journal/02_regression_ii.html#data-exploration",
    "title": "Regression (II)",
    "section": "\n3.3 Data Exploration",
    "text": "3.3 Data Exploration\nWe will visualize the data to determine possible product gaps. It would be interesting to see the sales for each category_2 separated by the frame material. However, we do not have the sales number. Instead, we will use the stock numbers as a proxy:\n\nmodel_num_sold_tbl <- bike_orderlines_tbl %>% \n  select(quantity, model) %>%\n  group_by(model) %>%\n  summarise(num_sold = sum(quantity)) %>%\n  ungroup() %>%\n  arrange(desc(num_sold))\n\nmodel_sales_tbl <- bike_orderlines_tbl %>% \n  select(total_price, model, category_2, frame_material) %>% \n  group_by(model, category_2, frame_material) %>%\n  summarise(revenue = sum(total_price)) %>%\n  ungroup() %>%\n  arrange(desc(revenue))\n\nmodel_sales_tbl <- model_sales_tbl %>% \n  inner_join(model_num_sold_tbl)\n\nmodel_sales_tbl\n\n\n\n\n\n  \n\n\n\nVisualizing the model_sales_tbl:\n\nmodel_sales_tbl %>% \n  mutate(category_2 = as_factor(category_2) %>% \n           fct_reorder(revenue, .fun = max) %>% \n           fct_rev()) %>% \n  ggplot(aes(frame_material, revenue)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2DC6D6\") +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, \n                                                    suffix = \"M\", \n                                                    accuracy = 0.1)) +\n  labs(title = \"Total Sales for Each Model\",\n    x = \"Frame Material\", y = \"Revenue\") +\n  theme(\n    panel.background = element_rect(fill = \"#222222\"),\n    panel.border = element_rect(color = \"white\", fill = NA),\n    plot.background = element_rect(fill = \"#222222\"),\n    line = element_line(color = \"white\"),\n    text = element_text(color = \"white\"),\n    axis.ticks = element_line(color = \"white\"),\n    axis.text = element_text(color = \"white\")\n  )"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#create-the-model",
    "href": "content/01_journal/02_regression_ii.html#create-the-model",
    "title": "Regression (II)",
    "section": "\n3.4 Create the model",
    "text": "3.4 Create the model\n\nlinear_model <- \n  linear_reg(\"regression\") %>%\n  set_engine(\"lm\")"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#split-the-data",
    "href": "content/01_journal/02_regression_ii.html#split-the-data",
    "title": "Regression (II)",
    "section": "\n3.5 Split the data",
    "text": "3.5 Split the data\n\nset.seed(1036)\nsplit_obj <- initial_split(bike_features_tbl, prop = 0.80, strata = \"category_2\")\n\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\n\ntrain_tbl <- train_tbl %>%\n  set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  <- test_tbl  %>% \n  set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#create-the-recipe",
    "href": "content/01_journal/02_regression_ii.html#create-the-recipe",
    "title": "Regression (II)",
    "section": "\n3.6 Create the recipe",
    "text": "3.6 Create the recipe\n\nsales_rec <- \n  recipe(price ~ ., data = train_tbl %>% \n           select(-c(bike_id:model_year),\n                  -weight,\n                  -category_1,\n                  -c(category_3:Fork),\n                  -c(Front_Derailleur:Brake_Rotor))) %>%\n  step_novel(all_predictors(), -all_numeric()) %>%\n  step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %>%\n  step_zv(all_predictors()) %>%\n  prep()\n\nsales_rec\n\n#> \n\n\n#> ── Recipe ──────────────────────────────────────────────────────────────────────\n\n\n#> \n\n\n#> ── Inputs\n\n\n#> Number of variables by role\n\n\n#> outcome:   1\n#> predictor: 3\n\n\n#> \n\n\n#> ── Training information\n\n\n#> Training data contained 184 data points and no incomplete rows.\n\n\n#> \n\n\n#> ── Operations\n\n\n#> • Novel factor level assignment for: frame_material, category_2, ... | Trained\n\n\n#> • Dummy variables from: frame_material, category_2, Rear_Derailleur | Trained\n\n\n#> • Zero variance filter removed: frame_material_new, ... | Trained"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#create-the-workflow",
    "href": "content/01_journal/02_regression_ii.html#create-the-workflow",
    "title": "Regression (II)",
    "section": "\n3.7 Create the workflow",
    "text": "3.7 Create the workflow\nBundle the linear_model and sales_rec together:\n\nsales_wflow <- \n  workflow() %>% \n  add_model(linear_model) %>% \n  add_recipe(sales_rec)\n\nsales_wflow\n\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: linear_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 3 Recipe Steps\n#> \n#> • step_novel()\n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> Linear Regression Model Specification (regression)\n#> \n#> Computational engine: lm\n\n\nFit the model to the training data:\n\nsales_fit <- \n  sales_wflow %>% \n  fit(data = train_tbl)"
  },
  {
    "objectID": "content/01_journal/02_regression_ii.html#evaluate-the-model",
    "href": "content/01_journal/02_regression_ii.html#evaluate-the-model",
    "title": "Regression (II)",
    "section": "\n3.8 Evaluate the model",
    "text": "3.8 Evaluate the model\n\nsales_fit %>% \n  calc_metrics(test_tbl)"
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html",
    "href": "content/01_journal/03_aml_with_h2o_i.html",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "Attrition is a problem that impacts all businesses, irrespective of geography, industry and size of the company. Employee attrition leads to significant costs for a business, including the cost of business disruption, hiring new staff and training new staff.\nOur goal is to use classification models to predict if an employee is likely to quit so that the situation can be intervened on time and remedied to prevent attrition."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#import-libraries",
    "href": "content/01_journal/03_aml_with_h2o_i.html#import-libraries",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(tidyverse)\nlibrary(GGally)"
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#read-data",
    "href": "content/01_journal/03_aml_with_h2o_i.html#read-data",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.2 Read Data",
    "text": "3.2 Read Data\n\nemployee_attrition_tbl <- read_csv(\n  \"~/GitHub/ss23-bdml-gcturemen/code_drafts/data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n\n\n#> Rows: 1,470\n#> Columns: 35\n#> $ Age                      <dbl> 41, 49, 37, 33, 27, 32, 59, 30, 38, 36, 35, 2…\n#> $ Attrition                <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"…\n#> $ BusinessTravel           <chr> \"Travel_Rarely\", \"Travel_Frequently\", \"Travel…\n#> $ DailyRate                <dbl> 1102, 279, 1373, 1392, 591, 1005, 1324, 1358,…\n#> $ Department               <chr> \"Sales\", \"Research & Development\", \"Research …\n#> $ DistanceFromHome         <dbl> 1, 8, 2, 3, 2, 2, 3, 24, 23, 27, 16, 15, 26, …\n#> $ Education                <dbl> 2, 1, 2, 4, 1, 2, 3, 1, 3, 3, 3, 2, 1, 2, 3, …\n#> $ EducationField           <chr> \"Life Sciences\", \"Life Sciences\", \"Other\", \"L…\n#> $ EmployeeCount            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n#> $ EmployeeNumber           <dbl> 1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16,…\n#> $ EnvironmentSatisfaction  <dbl> 2, 3, 4, 4, 1, 4, 3, 4, 4, 3, 1, 4, 1, 2, 3, …\n#> $ Gender                   <chr> \"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"…\n#> $ HourlyRate               <dbl> 94, 61, 92, 56, 40, 79, 81, 67, 44, 94, 84, 4…\n#> $ JobInvolvement           <dbl> 3, 2, 2, 3, 3, 3, 4, 3, 2, 3, 4, 2, 3, 3, 2, …\n#> $ JobLevel                 <dbl> 2, 2, 1, 1, 1, 1, 1, 1, 3, 2, 1, 2, 1, 1, 1, …\n#> $ JobRole                  <chr> \"Sales Executive\", \"Research Scientist\", \"Lab…\n#> $ JobSatisfaction          <dbl> 4, 2, 3, 3, 2, 4, 1, 3, 3, 3, 2, 3, 3, 4, 3, …\n#> $ MaritalStatus            <chr> \"Single\", \"Married\", \"Single\", \"Married\", \"Ma…\n#> $ MonthlyIncome            <dbl> 5993, 5130, 2090, 2909, 3468, 3068, 2670, 269…\n#> $ MonthlyRate              <dbl> 19479, 24907, 2396, 23159, 16632, 11864, 9964…\n#> $ NumCompaniesWorked       <dbl> 8, 1, 6, 1, 9, 0, 4, 1, 0, 6, 0, 0, 1, 0, 5, …\n#> $ Over18                   <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", …\n#> $ OverTime                 <chr> \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\",…\n#> $ PercentSalaryHike        <dbl> 11, 23, 15, 11, 12, 13, 20, 22, 21, 13, 13, 1…\n#> $ PerformanceRating        <dbl> 3, 4, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, …\n#> $ RelationshipSatisfaction <dbl> 1, 4, 2, 3, 4, 3, 1, 2, 2, 2, 3, 4, 4, 3, 2, …\n#> $ StandardHours            <dbl> 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 8…\n#> $ StockOptionLevel         <dbl> 0, 1, 0, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1, 1, 0, …\n#> $ TotalWorkingYears        <dbl> 8, 10, 7, 8, 6, 8, 12, 1, 10, 17, 6, 10, 5, 3…\n#> $ TrainingTimesLastYear    <dbl> 0, 3, 3, 3, 3, 2, 3, 2, 2, 3, 5, 3, 1, 2, 4, …\n#> $ WorkLifeBalance          <dbl> 1, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 2, 3, 3, …\n#> $ YearsAtCompany           <dbl> 6, 10, 0, 8, 2, 7, 1, 1, 9, 7, 5, 9, 5, 2, 4,…\n#> $ YearsInCurrentRole       <dbl> 4, 7, 0, 7, 2, 7, 0, 0, 7, 7, 4, 5, 2, 2, 2, …\n#> $ YearsSinceLastPromotion  <dbl> 0, 1, 0, 3, 2, 3, 0, 0, 1, 7, 0, 0, 4, 1, 0, …\n#> $ YearsWithCurrManager     <dbl> 5, 7, 0, 0, 2, 6, 0, 0, 8, 7, 3, 8, 3, 2, 3, …"
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#compensation-features",
    "href": "content/01_journal/03_aml_with_h2o_i.html#compensation-features",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.3 Compensation Features",
    "text": "3.3 Compensation Features\n\n\n\n\n\n\n\n\nQuestion: What can you deduce about the interaction between Monthly Income and Attrition?\na. Those that are leaving the company have a higher Monthly Income\nb. That those are staying have a lower Monthly Income\nc. Those that are leaving have a lower Monthly Income\nd. It's difficult to deduce anything based on the visualization\nAnswer: From the figure it can be seen that the employees that are leaving have a lower Monthly income. The answer is c.\nQuestion: What can you deduce about the interaction between Percent Salary Hike and Attrition?\na. Those that are leaving the company have a higher Percent Salary Hike\nb. Those that are staying have a lower Percent Salary Hike\nc. Those that are leaving have lower Percent Salary Hike\nd. It's difficult to deduce anything based on the visualization\nAnswer: Since the curves in the figure are similar, it is difficult to make any comments. The answer is d.\nQuestion: What can you deduce about the interaction between Stock Option Level and Attrition?\na. Those that are leaving the company have a higher stock option level\nb. Those that are staying have a higher stock option level\nc. It's difficult to deduce anything based on the visualization\nAnswer: Since the number of staying employees are higher at high stock option levels (1, 2) the answer is b."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#survey-results",
    "href": "content/01_journal/03_aml_with_h2o_i.html#survey-results",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.4 Survey results",
    "text": "3.4 Survey results\n\n\n\n\n\n\n\n\nQuestion: What can you deduce about the interaction between Environment Satisfaction and Attrition?\na. A higher proportion of those leaving have a low environment satisfaction level\nb. A higher proportion of those leaving have a high environment satisfaction level\nc. It's difficult to deduce anything based on the visualization\nAnswer: It is difficult to make a comment since it is not clearly defined what ‘high’ and ‘low’ satisfaction are. The answer is c.\nQuestion: What can you deduce about the interaction between Work Life Balance and Attrition\na. Those that are leaving have higher density of 2's and 3's\nb. Those that are staying have a higher density of 2's and 3's\nc. Those that are staying have a lower density of 2's and 3's\nd. It's difficult to deduce anything based on the visualization\nAnswer: From the figure, it can be seen that staying employees have a higher density of 2’s and 3’s. The answer is b."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#performance-data",
    "href": "content/01_journal/03_aml_with_h2o_i.html#performance-data",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.5 Performance Data",
    "text": "3.5 Performance Data\n\n\n\n\n\n\n\n\nQuestion: What Can you deduce about the interaction between Job Involvement and Attrition?\na. Those that are leaving have a lower density of 3's and 4's\nb. Those that are leaving have a lower density of 1's and 2's\nc. Those that are staying have a lower density of 2's and 3's\nd. It's difficult to deduce anything based on the visualization\nAnswer: From the figure, it can be seen that leaving employees have a lower density of 3’s and 4’s. The answer is a."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#work-life-features",
    "href": "content/01_journal/03_aml_with_h2o_i.html#work-life-features",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.6 Work-Life Features",
    "text": "3.6 Work-Life Features\n\n\n\n\n\n\n\n\nQuestion: What can you deduce about the interaction between Over Time and Attrition?\na. The proportion of those leaving that are working Over Time are high compared to those that are not leaving\nb. The proportion of those staying that are working Over Time are high compared to those that are not staying\nAnswer: Regarding Over Time, proportion of staying employees is higher in both groups. The answer is b."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#training-and-education",
    "href": "content/01_journal/03_aml_with_h2o_i.html#training-and-education",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.7 Training and Education",
    "text": "3.7 Training and Education\n\n\n\n\n\n\n\n\nQuestion: What can you deduce about the interaction between Training Times Last Year and Attrition\na. People that leave tend to have more annual trainings\nb. People that leave tend to have less annual trainings\nc. It's difficult to deduce anything based on the visualization\nAnswer: From the figure it can be seen that people that leave tend to have less annual trainings. The answer is b."
  },
  {
    "objectID": "content/01_journal/03_aml_with_h2o_i.html#time-based-features",
    "href": "content/01_journal/03_aml_with_h2o_i.html#time-based-features",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "\n3.8 Time-Based Features",
    "text": "3.8 Time-Based Features\n\n\n\n\n\n\n\n\nQuestion: What can you deduce about the interaction between Years At Company and Attrition\na. People that leave tend to have more working years at the company\nb. People that leave tend to have less working years at the company\nc. It's difficult to deduce anything based on the visualization\nAnswer: It is apparent that people that leave tend to have less working years at the company. The answer is b.\nQuestion: What can you deduce about the interaction between Years Since Last Promotion and Attrition?\na. Those that are leaving have more years since last promotion than those that are staying\nb. Those that are leaving have fewer years since last promotion than those that are staying\nc. It's difficult to deduce anything based on the visualization\nAnswer: Since both curves are similar in the figure it is hard to make a decision. The answer is c."
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html",
    "href": "content/01_journal/04_aml_with_h2o_ii.html",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "",
    "text": "For the challenge, we shall be working with a Product Backorders dataset. The goal here is to predict whether or not a product will be put on backorder status, given a number of product metrics such as current inventory, transit time, demand forecasts and prior sales. It’s a classic Binary Classification problem."
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#import-libraries",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#import-libraries",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(tidyverse)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(readxl)\nlibrary(h2o)"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#load-the-training-test-dataset",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#load-the-training-test-dataset",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.2 Load the training & test dataset",
    "text": "3.2 Load the training & test dataset\n\nproduct_backorders_tbl <- read_csv(\"data/product_backorders.csv\")\n\nproduct_backorders_tbl %>% glimpse()\n\n\n\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n\n\nset.seed(seed = 777)\nsplit_obj <- initial_split(product_backorders_tbl, prop = 0.80)\n\ntrain_set_tbl <- training(split_obj)\ntest_set_tbl  <- testing(split_obj)\n\n\nrecipe_obj <- recipe(went_on_backorder ~., data = train_set_tbl) %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(potential_issue,\n                 deck_risk,\n                 oe_constraint,\n                 ppap_risk,\n                 stop_auto_buy,\n                 rev_stop,\n                 went_on_backorder,\n                 fn = as.factor) %>% \n  prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_set_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_set_tbl)\n\ntrain_tbl %>% glimpse()\n\n#> Rows: 15,242\n#> Columns: 23\n#> $ sku               <dbl> 1370478, 1423347, 1704266, 2258894, 3000725, 2888766…\n#> $ national_inv      <dbl> 4, 59, 1, 9, 151, 6, 195, 66, 52, 0, 25, 1, 4, 2, 10…\n#> $ lead_time         <dbl> 12, NA, 8, 2, 8, 2, 8, 8, 14, 2, 4, 4, 8, 8, 2, 8, 5…\n#> $ in_transit_qty    <dbl> 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ forecast_3_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 122, 20, 0, 9, 15, 0, 28, 0, 0,…\n#> $ forecast_6_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 214, 35, 0, 18, 15, 0, 61, 0, 0…\n#> $ forecast_9_month  <dbl> 1, 0, 0, 0, 0, 0, 0, 306, 65, 0, 18, 21, 0, 94, 0, 0…\n#> $ sales_1_month     <dbl> 1, 0, 1, 0, 0, 0, 2, 36, 13, 0, 9, 4, 0, 3, 0, 0, 0,…\n#> $ sales_3_month     <dbl> 1, 7, 1, 0, 15, 0, 4, 119, 31, 0, 24, 9, 0, 26, 0, 0…\n#> $ sales_6_month     <dbl> 3, 20, 1, 0, 27, 0, 12, 209, 78, 0, 43, 15, 0, 56, 0…\n#> $ sales_9_month     <dbl> 3, 28, 1, 3, 43, 0, 16, 322, 121, 0, 75, 22, 1, 82, …\n#> $ min_bank          <dbl> 0, 0, 0, 0, 7, 0, 1, 45, 21, 1, 0, 2, 1, 6, 0, 0, 1,…\n#> $ potential_issue   <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ pieces_past_due   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.87, -99.00, 0.99, 0.99, 0.98, 0.98, 0.88, 0.98, 0.…\n#> $ perf_12_month_avg <dbl> 0.67, -99.00, 0.98, 0.99, 0.96, 0.99, 0.91, 0.99, 0.…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ deck_risk         <fct> No, Yes, No, Yes, No, No, No, No, No, No, No, No, No…\n#> $ oe_constraint     <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ ppap_risk         <fct> No, Yes, No, No, No, No, No, No, Yes, No, No, No, No…\n#> $ stop_auto_buy     <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n#> $ rev_stop          <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ went_on_backorder <fct> No, No, Yes, No, No, No, No, No, No, No, No, Yes, No…"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#specify-the-response-and-predictor-variables",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#specify-the-response-and-predictor-variables",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.3 Specify the response and predictor variables",
    "text": "3.3 Specify the response and predictor variables\n\nh2o.init()\n\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.80), seed = 767)\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#run-automl-specifying-the-stopping-criterion",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#run-automl-specifying-the-stopping-criterion",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.4 Run AutoML specifying the stopping criterion",
    "text": "3.4 Run AutoML specifying the stopping criterion\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 60,\n  nfolds            = 5 \n)"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#view-the-leaderboard",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#view-the-leaderboard",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.5 View the leaderboard",
    "text": "3.5 View the leaderboard\n\nautoml_models_h2o@leaderboard\n\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_1_AutoML_1_20230602_153206 0.9434092 0.1814100\n#> 2 StackedEnsemble_BestOfFamily_2_AutoML_1_20230602_153206 0.9424741 0.1830483\n#> 3                          GBM_1_AutoML_1_20230602_153206 0.9421039 0.1849211\n#> 4 StackedEnsemble_BestOfFamily_1_AutoML_1_20230602_153206 0.9420608 0.1835529\n#> 5                          GBM_4_AutoML_1_20230602_153206 0.9414669 0.1969647\n#> 6                          GBM_3_AutoML_1_20230602_153206 0.9360941 0.2023744\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7360194            0.1644997 0.2312126 0.05345927\n#> 2 0.7314111            0.1658739 0.2325972 0.05410147\n#> 3 0.7299478            0.1671278 0.2336671 0.05460032\n#> 4 0.7297099            0.1674267 0.2328884 0.05423702\n#> 5 0.7381370            0.1552414 0.2371925 0.05626029\n#> 6 0.7176308            0.1699963 0.2421208 0.05862246\n#> \n#> [10 rows x 7 columns]"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#predicting-using-leader-model",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#predicting-using-leader-model",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.6 Predicting using Leader Model",
    "text": "3.6 Predicting using Leader Model\n\nleader_model <- automl_models_h2o@leaderboard %>% \n  extract_h2o_model_name_by_position(1) %>% \n  h2o.getModel()\n\n#> StackedEnsemble_AllModels_1_AutoML_1_20230602_153206\n\n\n\npredictions <- h2o.predict(leader_model, newdata = as.h2o(test_tbl))\n\npredictions_tbl <- predictions %>% as_tibble()\n\npredictions_tbl %>% glimpse()\n\n\n\n#> Rows: 3,811\n#> Columns: 3\n#> $ predict <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n#> $ No      <dbl> 0.46939312, 0.10956838, 0.12959951, 0.44516257, 0.56051457, 0.…\n#> $ Yes     <dbl> 0.53060688, 0.89043162, 0.87040049, 0.55483743, 0.43948543, 0.…"
  },
  {
    "objectID": "content/01_journal/04_aml_with_h2o_ii.html#save-the-leader-model",
    "href": "content/01_journal/04_aml_with_h2o_ii.html#save-the-leader-model",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "\n3.7 Save the leader model",
    "text": "3.7 Save the leader model\n\nleader_model %>% h2o.saveModel(path = \"h2o_models/\")"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html",
    "href": "content/01_journal/05_performance_measures.html",
    "title": "Performance Measures",
    "section": "",
    "text": "For the challenge, we will continue working on the Product Backorders dataset. The goal here is to visualize various performance metrics of H2O models to simplify evaluation of them."
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#import-libraries",
    "href": "content/01_journal/05_performance_measures.html#import-libraries",
    "title": "Performance Measures",
    "section": "\n3.1 Import Libraries",
    "text": "3.1 Import Libraries\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(rsample)\nlibrary(h2o)\nlibrary(recipes)\nlibrary(cowplot)\nlibrary(glue)"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#load-the-training-test-dataset",
    "href": "content/01_journal/05_performance_measures.html#load-the-training-test-dataset",
    "title": "Performance Measures",
    "section": "\n3.2 Load the training & test dataset",
    "text": "3.2 Load the training & test dataset\n\nproduct_backorders_tbl <- read_csv(\"data/product_backorders.csv\")\n\nproduct_backorders_tbl %>% glimpse()\n\n\n\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n\n\nset.seed(seed = 777)\nsplit_obj <- initial_split(product_backorders_tbl, prop = 0.80)\n\ntrain_set_tbl <- training(split_obj)\ntest_set_tbl  <- testing(split_obj)\n\n\nrecipe_obj <- recipe(went_on_backorder ~., data = train_set_tbl) %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(potential_issue,\n                 deck_risk,\n                 oe_constraint,\n                 ppap_risk,\n                 stop_auto_buy,\n                 rev_stop,\n                 went_on_backorder,\n                 fn = as.factor) %>% \n  prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_set_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_set_tbl)\n\ntrain_tbl %>% glimpse()\n\n#> Rows: 15,242\n#> Columns: 23\n#> $ sku               <dbl> 1370478, 1423347, 1704266, 2258894, 3000725, 2888766…\n#> $ national_inv      <dbl> 4, 59, 1, 9, 151, 6, 195, 66, 52, 0, 25, 1, 4, 2, 10…\n#> $ lead_time         <dbl> 12, NA, 8, 2, 8, 2, 8, 8, 14, 2, 4, 4, 8, 8, 2, 8, 5…\n#> $ in_transit_qty    <dbl> 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ forecast_3_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 122, 20, 0, 9, 15, 0, 28, 0, 0,…\n#> $ forecast_6_month  <dbl> 0, 0, 0, 0, 0, 0, 0, 214, 35, 0, 18, 15, 0, 61, 0, 0…\n#> $ forecast_9_month  <dbl> 1, 0, 0, 0, 0, 0, 0, 306, 65, 0, 18, 21, 0, 94, 0, 0…\n#> $ sales_1_month     <dbl> 1, 0, 1, 0, 0, 0, 2, 36, 13, 0, 9, 4, 0, 3, 0, 0, 0,…\n#> $ sales_3_month     <dbl> 1, 7, 1, 0, 15, 0, 4, 119, 31, 0, 24, 9, 0, 26, 0, 0…\n#> $ sales_6_month     <dbl> 3, 20, 1, 0, 27, 0, 12, 209, 78, 0, 43, 15, 0, 56, 0…\n#> $ sales_9_month     <dbl> 3, 28, 1, 3, 43, 0, 16, 322, 121, 0, 75, 22, 1, 82, …\n#> $ min_bank          <dbl> 0, 0, 0, 0, 7, 0, 1, 45, 21, 1, 0, 2, 1, 6, 0, 0, 1,…\n#> $ potential_issue   <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ pieces_past_due   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.87, -99.00, 0.99, 0.99, 0.98, 0.98, 0.88, 0.98, 0.…\n#> $ perf_12_month_avg <dbl> 0.67, -99.00, 0.98, 0.99, 0.96, 0.99, 0.91, 0.99, 0.…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ deck_risk         <fct> No, Yes, No, Yes, No, No, No, No, No, No, No, No, No…\n#> $ oe_constraint     <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ ppap_risk         <fct> No, Yes, No, No, No, No, No, No, Yes, No, No, No, No…\n#> $ stop_auto_buy     <fct> Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n#> $ rev_stop          <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, …\n#> $ went_on_backorder <fct> No, No, Yes, No, No, No, No, No, No, No, No, Yes, No…"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#specify-the-response-and-predictor-variables",
    "href": "content/01_journal/05_performance_measures.html#specify-the-response-and-predictor-variables",
    "title": "Performance Measures",
    "section": "\n3.3 Specify the response and predictor variables",
    "text": "3.3 Specify the response and predictor variables\n\nh2o.init()\n\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.80), seed = 767)\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#run-automl-specifying-the-stopping-criterion",
    "href": "content/01_journal/05_performance_measures.html#run-automl-specifying-the-stopping-criterion",
    "title": "Performance Measures",
    "section": "\n3.4 Run AutoML specifying the stopping criterion",
    "text": "3.4 Run AutoML specifying the stopping criterion\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 60,\n  nfolds            = 5 \n)"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#view-the-leaderboard",
    "href": "content/01_journal/05_performance_measures.html#view-the-leaderboard",
    "title": "Performance Measures",
    "section": "\n3.5 View the leaderboard",
    "text": "3.5 View the leaderboard\n\nautoml_models_h2o@leaderboard\n\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_1_AutoML_1_20230603_232725 0.9450212 0.1804094\n#> 2 StackedEnsemble_BestOfFamily_2_AutoML_1_20230603_232725 0.9446927 0.1810745\n#> 3                          GBM_1_AutoML_1_20230603_232725 0.9442833 0.1822440\n#> 4 StackedEnsemble_BestOfFamily_1_AutoML_1_20230603_232725 0.9442798 0.1816096\n#> 5                          GBM_4_AutoML_1_20230603_232725 0.9352965 0.2162264\n#> 6                          GBM_3_AutoML_1_20230603_232725 0.9325110 0.2084508\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7399996            0.1391773 0.2311003 0.05340736\n#> 2 0.7314874            0.1733098 0.2316515 0.05366240\n#> 3 0.7303754            0.1734592 0.2323764 0.05399879\n#> 4 0.7301131            0.1734592 0.2319166 0.05378531\n#> 5 0.7177510            0.1789265 0.2486873 0.06184535\n#> 6 0.7292422            0.1781501 0.2444128 0.05973761\n#> \n#> [9 rows x 7 columns]"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#leaderboard-visualization",
    "href": "content/01_journal/05_performance_measures.html#leaderboard-visualization",
    "title": "Performance Measures",
    "section": "\n3.6 Leaderboard visualization",
    "text": "3.6 Leaderboard visualization\n\nmodel_leaderboard <- automl_models_h2o@leaderboard %>%\n  as_tibble() %>%\n  select(-c(aucpr, mean_per_class_error, rmse, mse)) %>%\n  mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n  rownames_to_column(var = \"row_name\") %>%\n  mutate(model_id   = as_factor(model_id) %>% reorder(auc), \n         model_type = as.factor(model_type)\n  ) %>% \n  pivot_longer(cols = -c(model_id, model_type, row_name), \n               names_to = \"key\", \n               values_to = \"value\", \n               names_transform = list(key = forcats::fct_inorder)\n  ) %>% \n  mutate(model_id = paste0(row_name, \". \", model_id) %>% as_factor() %>% fct_rev())\n\nmodel_leaderboard %>%\n  ggplot(aes(value, model_id, color = model_type)) +\n  geom_point(size = 3) +\n  geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n  \n  # Facet to break out logloss and auc\n  facet_wrap(~ key, scales = \"free_x\") +\n  labs(title = \"Leaderboard Metrics\",\n       subtitle = paste0(\"Ordered by: \", \"auc\"),\n       y = \"Model Position, Model ID\", x = \"\") + \n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#tune-a-model-with-grid-search",
    "href": "content/01_journal/05_performance_measures.html#tune-a-model-with-grid-search",
    "title": "Performance Measures",
    "section": "\n3.7 Tune a model with grid search",
    "text": "3.7 Tune a model with grid search\n\nmodel <- automl_models_h2o@leaderboard %>% \n  extract_h2o_model_name_by_position(9) %>% \n  h2o.getModel()\n\n#> GLM_1_AutoML_1_20230603_232725\n\nh2o.performance(model, newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#> H2OBinomialMetrics: glm\n#> \n#> MSE:  0.09817608\n#> RMSE:  0.3133306\n#> LogLoss:  0.3303213\n#> Mean Per-Class Error:  0.3237555\n#> AUC:  0.7403997\n#> AUCPR:  0.2842939\n#> Gini:  0.4807994\n#> R^2:  0.08355864\n#> Residual Deviance:  2517.709\n#> AIC:  2575.709\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     2230 1116 0.333533  =1116/3346\n#> Yes     146  319 0.313978    =146/465\n#> Totals 2376 1435 0.331147  =1262/3811\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.130969    0.335789 221\n#> 2                       max f2  0.100363    0.508274 265\n#> 3                 max f0point5  0.228856    0.319582 102\n#> 4                 max accuracy  0.421982    0.880609  16\n#> 5                max precision  1.000000    1.000000   0\n#> 6                   max recall  0.000054    1.000000 399\n#> 7              max specificity  1.000000    1.000000   0\n#> 8             max absolute_mcc  0.100363    0.239662 265\n#> 9   max min_per_class_accuracy  0.132503    0.671847 219\n#> 10 max mean_per_class_accuracy  0.100363    0.683015 265\n#> 11                     max tns  1.000000 3346.000000   0\n#> 12                     max fns  1.000000  464.000000   0\n#> 13                     max fps  0.000054 3346.000000 399\n#> 14                     max tps  0.000054  465.000000 399\n#> 15                     max tnr  1.000000    1.000000   0\n#> 16                     max fnr  1.000000    0.997849   0\n#> 17                     max fpr  0.000054    1.000000 399\n#> 18                     max tpr  0.000054    1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n\n\n\nmodel_grid <- h2o.grid(\n  algorithm = \"glm\",\n  grid_id = \"model_grid\",\n  x = x,\n  y = y,\n  training_frame = train_h2o,\n  validation_frame = valid_h2o,\n  nfolds = 5,\n  hyper_params = list(\n    alpha = c(0, 0.25, 0.50, 0.75, 1.00),\n    lambda = c(0, 0.01, 0.1, 1, 10)\n  )\n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nh2o.getGrid(grid_id = \"model_grid\", sort_by = \"auc\", decreasing = TRUE)\n\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: model_grid \n#> Used hyper parameters: \n#>   -  alpha \n#>   -  lambda \n#> Number of models: 25 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by decreasing auc\n#>   alpha lambda          model_ids     auc\n#> 1   0.0    0.0 model_grid_model_1 0.79015\n#> 2   1.0    0.0 model_grid_model_5 0.78835\n#> 3  0.25    0.0 model_grid_model_2 0.78667\n#> 4  0.75    0.0 model_grid_model_4 0.78667\n#> 5   0.5    0.0 model_grid_model_3 0.78573\n#> \n#> ---\n#>    alpha lambda           model_ids     auc\n#> 20   0.5   10.0 model_grid_model_23 0.48927\n#> 21  0.25   10.0 model_grid_model_22 0.48640\n#> 22  0.75    0.1 model_grid_model_14 0.48377\n#> 23   0.5    1.0 model_grid_model_18 0.48296\n#> 24  0.75    1.0 model_grid_model_19 0.48241\n#> 25   1.0   10.0 model_grid_model_25 0.48057\n\nmodel_grid_5 <- h2o.getModel(\"model_grid_model_5\")\nmodel_grid_5 %>% h2o.auc(train = T, valid = T, xval = T)\n\n#>     train     valid      xval \n#> 0.7866092 0.7827733 0.7883548\n\n\n\nmodel_grid_5 %>% h2o.performance(newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#> H2OBinomialMetrics: glm\n#> \n#> MSE:  0.09534117\n#> RMSE:  0.3087737\n#> LogLoss:  0.3223601\n#> Mean Per-Class Error:  0.313812\n#> AUC:  0.7742565\n#> AUCPR:  0.3253347\n#> Gini:  0.5485131\n#> R^2:  0.1100216\n#> Residual Deviance:  2457.029\n#> AIC:  2503.029\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     2534  812 0.242678  =812/3346\n#> Yes     179  286 0.384946   =179/465\n#> Totals 2713 1098 0.260037  =991/3811\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.158004    0.365963 193\n#> 2                       max f2  0.101413    0.535378 262\n#> 3                 max f0point5  0.234898    0.363489 111\n#> 4                 max accuracy  0.399793    0.881134  31\n#> 5                max precision  0.680566    0.750000   9\n#> 6                   max recall  0.000019    1.000000 399\n#> 7              max specificity  0.999834    0.999701   0\n#> 8             max absolute_mcc  0.117944    0.279256 240\n#> 9   max min_per_class_accuracy  0.136795    0.695158 216\n#> 10 max mean_per_class_accuracy  0.107751    0.711258 254\n#> 11                     max tns  0.999834 3345.000000   0\n#> 12                     max fns  0.999834  463.000000   0\n#> 13                     max fps  0.000019 3346.000000 399\n#> 14                     max tps  0.000019  465.000000 399\n#> 15                     max tnr  0.999834    0.999701   0\n#> 16                     max fnr  0.999834    0.995699   0\n#> 17                     max fpr  0.000019    1.000000 399\n#> 18                     max tpr  0.000019    1.000000 399\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#visualize-the-trade-off-between-the-precision-and-the-recall-and-the-optimal-threshold",
    "href": "content/01_journal/05_performance_measures.html#visualize-the-trade-off-between-the-precision-and-the-recall-and-the-optimal-threshold",
    "title": "Performance Measures",
    "section": "\n3.8 Visualize the trade-off between the precision and the recall and the optimal threshold",
    "text": "3.8 Visualize the trade-off between the precision and the recall and the optimal threshold\n\np_model_grid_5 <- model_grid_5 %>% \n  h2o.performance(newdata = as.h2o(test_tbl))\n\np_model_grid_5_tbl <- p_model_grid_5 %>% \n  h2o.metric() %>%\n  as_tibble() %>%\n  mutate(auc = h2o.auc(p_model_grid_5))\n\np_model_grid_5_tbl %>%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(p_model_grid_5, \"f1\")) +\n  labs(title = \"Precision vs Recall\", y = \"value\")"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#roc-plot",
    "href": "content/01_journal/05_performance_measures.html#roc-plot",
    "title": "Performance Measures",
    "section": "\n3.9 ROC Plot",
    "text": "3.9 ROC Plot\n\nroc_plot <- p_model_grid_5_tbl %>% \n  mutate(auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%\n  ggplot(aes(fpr, tpr, linetype = auc)) +\n  geom_line(size = 1) +\n  geom_abline(color = \"red\", linetype = \"dotted\") +\n  labs(\n    title = \"ROC Plot\",\n    subtitle = \"-\"\n  )\n\nroc_plot"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#precision-vs-recall-plot",
    "href": "content/01_journal/05_performance_measures.html#precision-vs-recall-plot",
    "title": "Performance Measures",
    "section": "\n3.10 Precision vs Recall Plot",
    "text": "3.10 Precision vs Recall Plot\n\npr_plot <- p_model_grid_5_tbl %>%\n  mutate(auc  = auc %>% round(3) %>% as.character() %>% as_factor()) %>%\n  ggplot(aes(recall, precision, linetype = auc)) +\n  geom_line(size = 1) +\n  labs(\n    title = \"Precision vs Recall Plot\",\n    subtitle = \"-\"\n  )\n\npr_plot"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#gain-plot",
    "href": "content/01_journal/05_performance_measures.html#gain-plot",
    "title": "Performance Measures",
    "section": "\n3.11 Gain Plot",
    "text": "3.11 Gain Plot\n\ngain_lift_tbl <- p_model_grid_5 %>%\n  h2o.gainsLift() %>%\n  as_tibble()\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"lift\")) %>%\n  mutate(baseline = cumulative_data_fraction) %>%\n  rename(gain     = cumulative_capture_rate) %>%\n  # prepare the data for the plotting (for the color and group aesthetics)\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_plot <- gain_transformed_tbl %>%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Gain Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Gain\"\n  )\n\ngain_plot"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#lift-plot",
    "href": "content/01_journal/05_performance_measures.html#lift-plot",
    "title": "Performance Measures",
    "section": "\n3.12 Lift Plot",
    "text": "3.12 Lift Plot\n\nlift_transformed_tbl <- gain_lift_tbl %>% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n  select(-contains(\"capture\")) %>%\n  mutate(baseline = 1) %>%\n  rename(lift = cumulative_lift) %>%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_plot <- lift_transformed_tbl %>%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Lift Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Lift\"\n  )\n\nlift_plot"
  },
  {
    "objectID": "content/01_journal/05_performance_measures.html#dashboard-with-cowplot",
    "href": "content/01_journal/05_performance_measures.html#dashboard-with-cowplot",
    "title": "Performance Measures",
    "section": "\n3.13 Dashboard with cowplot",
    "text": "3.13 Dashboard with cowplot\n\np_legend <- get_legend(roc_plot)\n\nroc_plot <- roc_plot + theme(legend.position = \"none\")\n\np <- plot_grid(roc_plot, pr_plot, gain_plot, lift_plot, ncol = 2)\n\np_title <- ggdraw() + \n  draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", color = \"#2C3E50\")\n  \np_subtitle <- ggdraw() + draw_label(glue(\"-\"), size = 10, color = \"#2C3E50\")\n  \ncombined_plot <- plot_grid(p_title, \n                           p_subtitle, \n                           p, \n                           p_legend, \n                           ncol = 1, \n                           rel_heights = c(0.05, 0.05, 1, 0.05 * 4))\ncombined_plot"
  },
  {
    "objectID": "content/01_journal/06_lime.html",
    "href": "content/01_journal/06_lime.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html",
    "href": "content/01_journal/data/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/tidyverse.html",
    "href": "content/01_journal/tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/tidyverse.html#header-2",
    "href": "content/01_journal/tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]